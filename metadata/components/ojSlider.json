{
  "name": "oj-slider",
  "version": "5.0.0",
  "jetVersion": "5.0.0",
  "displayName": "Slider",
  "preview": true,
  "roles": [
    "slider"
  ],
  "styleClasses": [
    {
      "styleGroup": [
        "oj-focus-highlight"
      ],
      "description": "Under normal circumstances this class is applied automatically. It is documented here for the rare cases that an app developer needs per-instance control.\nThe \"oj-focus-highlight\" class applies focus styling that may not be desirable when the focus results from pointer interaction (touch or mouse), but which is needed for accessibility when the focus occurs by a non-pointer mechanism, for example keyboard or initial page load.\nThe application-level behavior for this component is controlled in the theme by the \"$focusHighlightPolicy\" SASS variable; however, note that this same variable controls the focus highlight policy of many components and patterns. The values for the variable are:\n\"nonPointer\": \"oj-focus-highlight\" is applied only when focus is not the result of pointer interaction. Most themes default to this value.\n\"all\": \"oj-focus-highlight\" is applied regardless of the focus mechanism.\n\"none\": \"oj-focus-highlight\" is never applied. This behavior is not accessible, and is intended for use when the application wishes to use its own event listener to precisely control when the class is applied (see below). The application must ensure the accessibility of the result.\nTo change the behavior on a per-instance basis, the application can set the SASS variable as desired and then use event listeners to toggle this class as needed."
    }
  ],
  "description": "Displays an interactive slider element.",
  "properties": {
    "describedBy": {
      "description": "described the relationship between this component and another element.",
      "type": "string",
      "displayName": "Described By"
    },
    "disabled": {
      "description": "Whether the component is disabled. The disabled attribute is used as its initial value if it exists, when the attribute is not explicitly set. When neither is set, disabled defaults to false.",
      "type": "boolean",
      "displayName": "Disabled",
      "value": false
    },
    "displayOptions": {
      "description": "Customize how to display to the user the form field's messages, converter and validator hints and help instruction text.",
      "type": "Object|undefined",
      "displayName": "Display Options",
      "value": {
        "messages": [
          "inline"
        ],
        "converterHint": [
          "placeholder",
          "notewindow"
        ],
        "validatorHint": [
          "notewindow"
        ],
        "helpInstruction": [
          "notewindow"
        ]
      },
      "properties": {
        "converterHint": {
          "description": "supported values are 'placeholder', \n'notewindow', 'none'. The \ndefault value is ['placeholder', 'notewindow']. When there \nis already a placeholder set on the component, the converter hint falls back to display \ntype of 'notewindow'.\nTo change the default value you can do this - \nE.g. {'displayOptions: {'converterHint': ['none']}}",
          "type": "Array<('placeholder'|'notewindow'|'none')>|'placeholder'|'notewindow'|'none'"
        },
        "validatorHint": {
          "description": "supported values are 'notewindow', \n'none'.\nTo change the default value you can do this - \n{'displayOptions: {'validatorHint': ['none']}}",
          "type": "Array<('notewindow'|'none')>|'notewindow'|'none'"
        },
        "messages": {
          "description": "supported values are 'notewindow', \n'inline',\n'none'. The default is 'inline'. \nTo change the default value you can do this - \nE.g. {'displayOptions: {'messages': 'none'}}",
          "type": "Array<('inline'|'notewindow'|'none')>|'inline'|'notewindow'|'none'"
        },
        "helpInstruction": {
          "description": "supported values are 'notewindow', \n'none'.\nTo change the default value you can do this - \nE.g. displayOptions='{\"helpInstruction\": \"none\"}'",
          "type": "Array<('notewindow'|'none')>|'notewindow'|'none'"
        }
      }
    },
    "help": {
      "description": "Form component help information.\n\nThe properties supported on the help option are:",
      "type": "Object.<string, string>",
      "displayName": "Help",
      "value": {
        "help": {
          "instruction": null
        }
      },
      "properties": {
        "instruction": {
          "description": "this represents advisory information for the component\nThe default value is null.",
          "type": "string"
        }
      }
    },
    "helpHints": {
      "description": "Represents hints for oj-form-layout element to \nrender help information on the label of the editable component.",
      "type": "Object.<string, string>",
      "displayName": "Help Hints",
      "value": {
        "definition": "",
        "source": ""
      },
      "translatable": true,
      "properties": {
        "definition": {
          "description": "Hint for help definition text associated with the label. \nIt is what shows up when the user hovers over the help icon, or tabs into the help icon, or press and holds the help icon on a mobile device. No formatted text is available for help definition attribute.\n\nSee the help-hints attribute for usage examples.",
          "type": "string",
          "value": ""
        },
        "source": {
          "description": "Hint for help source URL associated with the label. \nIf present, a help icon will render next to the label. For security reasons we only support urls with protocol http: or https:. If the url doesn't comply we ignore it and throw an error. \nPass in an encoded URL since we do not encode the URL.\n\nSee the help-hints attribute for usage examples.",
          "type": "string",
          "value": ""
        }
      }
    },
    "labelHint": {
      "description": "Represents a hint for oj-form-layout element to render a label on the editable component.",
      "type": "string",
      "displayName": "Label Hint",
      "value": "",
      "translatable": true
    },
    "max": {
      "description": "The maximum value of the slider. The max must not be less than the min, or else an Error is thrown during initialization.",
      "type": "number",
      "displayName": "Max",
      "value": null
    },
    "messagesCustom": {
      "description": "List of messages an app would add to the component",
      "type": "Array<Object>",
      "displayName": "Messages Custom",
      "value": [],
      "writeback": true
    },
    "min": {
      "description": "The minimum value of the slider. The min must not be greater than the max, or else an Error is thrown during initialization.",
      "type": "number",
      "displayName": "Min",
      "value": null
    },
    "orientation": {
      "description": "Specify the orientation of the slider.",
      "type": "string",
      "displayName": "Orientation",
      "value": "horizontal",
      "enumValues": [
        "horizontal",
        "vertical"
      ],
      "propertyEditorValues": {
        "horizontal": {
          "description": "Orient the slider horizontally.",
          "displayName": "Horizontal"
        },
        "vertical": {
          "description": "Orient the slider vertically.",
          "displayName": "Vertical"
        }
      }
    },
    "step": {
      "description": "Determines the size or amount of each interval or step the slider takes between min and max. The full specified value of the range (max - min) should be divisible by step.",
      "type": "number",
      "displayName": "Step",
      "value": 1
    },
    "transientValue": {
      "description": "The transientValue is the read-only attribute for retrieving the transient value from the slider. The transientValue updates to display the transient changes of the slider thumb value (subject to the step constraints). The difference in behavior is transientValue will be updated as the thumb is sliding, where as value is updated only after the thumb is released (or after a key press). This is a read-only attribute so page authors cannot set or change it directly.",
      "type": "number",
      "displayName": "Transient Value",
      "writeback": true,
      "readOnly": true,
      "preview": true
    },
    "translations": {
      "description": "A collection of translated resources from the translation bundle, or null if this\ncomponent has no resources. Resources may be accessed and overridden individually or collectively, as seen in the examples. If the component does not contain any translatable resource, the default value of this attribute will be \nnull. If not, an object containing all resources relevant to the component.\n\nIf this component has translations, their documentation immediately follows this doc entry.",
      "type": "Object|null",
      "displayName": "Translations",
      "translatable": true,
      "properties": {
        "invalidStep": {
          "description": "Invalid step value.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "value": "Invalid step; step must be > 0"
        },
        "maxMin": {
          "description": "Max is greater than min.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "value": "Max must not be less than min"
        },
        "noValue": {
          "description": "Missing value exception.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "value": "ojSlider has no value"
        },
        "optionNum": {
          "description": "The option is not a number.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "value": "{option} option is not a number"
        },
        "valueRange": {
          "description": "Value outside min to max range.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "value": "Value must be within min to max range"
        }
      }
    },
    "type": {
      "description": "The slider type determines whether the slider how the value is represented in the UI.",
      "type": "string",
      "displayName": "Type",
      "value": "fromMin",
      "enumValues": [
        "fromMax",
        "fromMin",
        "single"
      ],
      "propertyEditorValues": {
        "fromMax": {
          "description": "A single-thumb slider where the value bar goes from the slider thumb to the the slider max.",
          "displayName": "From Max"
        },
        "fromMin": {
          "description": "A single-thumb slider where the value bar goes from the slider min to the the slider thumb.",
          "displayName": "From Min"
        },
        "single": {
          "description": "A single-thumb slider where the value bar has no additional styling.",
          "displayName": "Single"
        }
      }
    },
    "valid": {
      "description": "The validity state of the component",
      "type": "string",
      "displayName": "Valid",
      "writeback": true,
      "readOnly": true,
      "preview": true,
      "enumValues": [
        "invalidHidden",
        "invalidShown",
        "pending",
        "valid"
      ],
      "propertyEditorValues": {
        "invalidHidden": {
          "description": "The component has invalid messages hidden and no invalid messages showing. An invalid message is one with severity \"error\" or higher.",
          "displayName": "Invalid Hidden"
        },
        "invalidShown": {
          "description": "The component has invalid messages showing. An invalid message is one with severity \"error\" or higher.",
          "displayName": "Invalid Shown"
        },
        "pending": {
          "description": "The component is waiting for the validation state to be determined.\nThe \"pending\" state is never set in this release of JET. It will be set in a future release.",
          "displayName": "Pending"
        },
        "valid": {
          "description": "The component is valid",
          "displayName": "Valid"
        }
      }
    },
    "value": {
      "description": "The numerical value of the slider. Note that the value attribute should be compatible with the type attribute, as described above.",
      "type": "number",
      "displayName": "Value",
      "value": 0,
      "writeback": true
    }
  },
  "methods": {
    "refresh": {
      "description": "Called when the DOM underneath the component changes requiring a re-render of the component. An \nexample is when the id for the input changes. \n\nAnother time when refresh might be called is when the locale for the page changes. When it \nchanges, attributes used by its converter and validator that are locale specific, its hints, \nmessages and translations will be updated. \n\n\n\nWhen refresh method is called, the component may take various \nsteps such as clearing messages, running validation etc., based on the state it is in. \n\nSteps Performed Always\n\nThe converter and validators used by the component are reset, and new converter and \nvalidator hints is pushed to messaging. E.g., notewindow displays the new hint(s). \nRunning Validation\n\nif component is valid when refresh() is called, the display value is refreshed if component \nhas a converter set.\nif component is invalid and is showing messages when \nrefresh() is called, then all component messages are cleared \nand full validation run using the display value on the component. if there are validation errors, then value attribute is not updated and the error is shown. if no errors result from the validation, the value attribute is updated; page author can listen to the onValueChanged event to clear custom errors.\n\n\nif component is invalid and has deferred messages when refresh() \nis called, then all component messages are cleared and deferred validation is run.\n\n\n\nClearing Messages\n\nIf clearing messages only those created by the component are cleared.\nmessagesCustom attribute is not cleared.\n\n",
      "return": "void"
    },
    "reset": {
      "description": "Resets the component by clearing all messages and messages attributes - \nmessagesCustom -\nand updates the component's display value using the attribute value. User entered values will be \nerased when this method is called.",
      "return": "void"
    },
    "showMessages": {
      "description": "Takes all deferred messages and shows them. \nIt then updates the valid property; e.g.,\nif the valid state was \"invalidHidden\"\nbefore showMessages(), the valid state will become \"invalidShown\" after showMessages(). \n\nIf there were no deferred messages this method simply returns. \n",
      "return": "void"
    },
    "setProperty": {
      "description": "Sets a property or a single subproperty for complex properties and notifies the component\nof the change, triggering a [property]Changed event.",
      "params": [
        {
          "name": "property",
          "description": "The property name to set. Supports dot notation for subproperty access.",
          "type": "string"
        },
        {
          "name": "value",
          "description": "The new value to set the property to.",
          "type": "*"
        }
      ],
      "return": "void"
    },
    "getProperty": {
      "description": "Retrieves a value for a property or a single subproperty for complex properties.",
      "params": [
        {
          "name": "property",
          "description": "The property name to get. Supports dot notation for subproperty access.",
          "type": "string"
        }
      ],
      "return": "*"
    },
    "setProperties": {
      "description": "Performs a batch set of properties.",
      "params": [
        {
          "name": "properties",
          "description": "An object containing the property and value pairs to set.",
          "type": "Object"
        }
      ],
      "return": "void"
    }
  },
  "events": {
    "ojAnimateStart": {
      "description": "Triggered when a default animation is about to start, such as when the component is\nbeing opened/closed or a child item is being added/removed. The default animation can\nbe cancelled by calling event.preventDefault.",
      "bubbles": true,
      "cancelable": true,
      "detail": {
        "action": {
          "description": "The action that triggers the animation. Supported values are: \"inline-open\" - when an inline message container opens or increases in size \"inline-close\" - when an inline message container closes or decreases in size \"notewindow-open\" - when a note window opens \"notewindow-close\" - when a note window closes ",
          "type": "string"
        },
        "element": {
          "description": "The element being animated.",
          "type": "Element"
        },
        "endCallback": {
          "description": "If the event listener calls event.preventDefault to cancel the default animation, it must call the endCallback function when it finishes its own animation handling and any custom animation has ended.",
          "type": "function"
        }
      }
    },
    "ojAnimateEnd": {
      "description": "Triggered when a default animation has ended.",
      "bubbles": true,
      "cancelable": true,
      "detail": {
        "action": {
          "description": "The action that triggers the animation. Supported values are: \"inline-open\" - when an inline message container opens or increases in size \"inline-close\" - when an inline message container closes or decreases in size \"notewindow-open\" - when a note window opens \"notewindow-close\" - when a note window closes ",
          "type": "string"
        },
        "element": {
          "description": "The element being animated.",
          "type": "Element"
        }
      }
    }
  },
  "slots": {
    "contextMenu": {
      "description": "The contextMenu slot is set on the oj-menu within this element. \nThis is used to designate the JET Menu that this component should launch as a context menu on right-click, Shift-F10, Press & Hold, or component-specific gesture. \nIf specified, the browser's native context menu will be replaced by the JET Menu specified in this slot.\n\nThe application can register a listener for the Menu's ojBeforeOpen event. The listener can cancel the launch via event.preventDefault(), \nor it can customize the menu contents by editing the menu DOM directly, and then calling refresh() on the Menu.\n\nTo help determine whether it's appropriate to cancel the launch or customize the menu, the ojBeforeOpen listener can use component API's to determine which \ntable cell, chart item, etc., is the target of the context menu. See the JSDoc and demos of the individual components for details. \n\nKeep in mind that any such logic must work whether the context menu was launched via right-click, Shift-F10, Press & Hold, or component-specific touch gesture."
    }
  }
}