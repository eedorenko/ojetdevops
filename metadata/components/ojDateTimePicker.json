{
  "name": "oj-date-time-picker",
  "version": "5.0.0",
  "jetVersion": "5.0.0",
  "displayName": "Inline Date Time Picker",
  "preview": true,
  "roles": [
    "combobox"
  ],
  "description": "An inline element for picking a date-time value.",
  "properties": {
    "autocomplete": {
      "description": "Dictates component's autocomplete state. \nThis attribute indicates whether the value of the control can be automatically \ncompleted by the browser.",
      "type": "string",
      "displayName": "Autocomplete",
      "value": "on",
      "enumValues": [
        "off",
        "on"
      ],
      "propertyEditorValues": {
        "off": {
          "description": "disable autofill",
          "displayName": "Off"
        },
        "on": {
          "description": "enable autofill",
          "displayName": "On"
        }
      },
      "extension": {
        "_COPY_TO_INNER_ELEM": true
      }
    },
    "autofocus": {
      "description": "Autofocus is a Boolean that reflects the autofocus attribute, If it is set to true \nthen the associated component will get input focus when the page is loaded.\nSetting this property doesn't set the focus to the component: \nit tells the browser to focus to it when the element is inserted in the document.",
      "type": "boolean",
      "displayName": "Autofocus",
      "value": false,
      "extension": {
        "_COPY_TO_INNER_ELEM": true
      }
    },
    "converter": {
      "description": "Default converter for InputDateTime\n\nIf one wishes to provide a custom converter for the InputDateTime override the factory returned for\noj.Validation.converterFactory(oj.ConverterFactory.CONVERTER_TYPE_DATETIME)\n\nWhen converter property changes due to programmatic\nintervention, the element performs various tasks based on the current state it is in. \n\nSteps Performed Always\n\nAny cached converter instance is cleared and new converter created. The converter hint is\npushed to messaging. E.g., notewindow displays the new hint(s).\n\n\n\nRunning Validation\n\nif element is valid when converter property changes, the\ndisplay value is refreshed.\nif element is invalid and is showing messages when\nconverter property changes then all element messages are\ncleared and full validation run using the current display value on the element. if there are validation errors, then value property is not updated, and the error is shown. The display value is not refreshed in this case. if no errors result from the validation, the value property is updated; page author can listen to the onValueChanged event to clear custom errors. The display value is refreshed with the formatted value provided by converter.\n\n\nif element is invalid and has deferred messages when converter property changes, the display value is again refreshed with the formatted value provided by converter.\n\n\nClearing Messages\n\nOnly messages created by the element are cleared.\nmessagesCustom property is not cleared.\nPage authors can \nchoose to clear it explicitly when setting the converter option.\n\n",
      "type": "Object",
      "displayName": "Converter",
      "value": "oj.Validation.converterFactory(oj.ConverterFactory.CONVERTER_TYPE_DATETIME).createConverter({\"day\": \"2-digit\", \"month\": \"2-digit\", \"year\": \"2-digit\", \"hour\": \"2-digit\", \"minute\": \"2-digit\"})"
    },
    "datePicker": {
      "description": " Note that Jet framework prohibits setting subset of properties which are object types. For example myInputDate.datePicker = {footerLayout: \"today\"}; is prohibited as it will wipe out all other sub-properties for \"datePicker\" object. If one wishes to do this [by above syntax or knockout] one will have to get the \"datePicker\" object, modify the necessary sub-property and pass it to above syntax. Default values for the datePicker sub-properties can also be overridden with the theming variable $inputDateTimeDatePickerOptionDefault, which is merged with other defaults. Note that all of the datePicker sub-properties except showOn are not available when renderMode is 'native'.",
      "type": "Object",
      "displayName": "Date Picker",
      "properties": {
        "changeMonth": {
          "description": "Whether the month should be rendered as a button to allow selection instead of text. See the date-picker attribute for usage examples.",
          "type": "string",
          "value": "select",
          "enumValues": [
            "none",
            "select"
          ],
          "propertyEditorValues": {
            "none": {
              "description": "As text",
              "displayName": "None"
            },
            "select": {
              "description": "As a button",
              "displayName": "Select"
            }
          }
        },
        "changeYear": {
          "description": "Whether the year should be rendered as a button to allow selection instead of text. See the date-picker attribute for usage examples.",
          "type": "string",
          "value": "select",
          "enumValues": [
            "none",
            "select"
          ],
          "propertyEditorValues": {
            "none": {
              "description": "As text",
              "displayName": "None"
            },
            "select": {
              "description": "As a button",
              "displayName": "Select"
            }
          }
        },
        "currentMonthPos": {
          "description": "The position in multipe months at which to show the current month (starting at 0). See the date-picker attribute for usage examples.",
          "type": "number",
          "value": 0,
          "maximum": 12,
          "minimum": 0
        },
        "daysOutsideMonth": {
          "description": "Dictates the behavior of days outside the current viewing month. See the date-picker attribute for usage examples.",
          "type": "string",
          "value": "hidden",
          "enumValues": [
            "hidden",
            "selectable",
            "visible"
          ],
          "propertyEditorValues": {
            "hidden": {
              "description": "Days outside the current viewing month will be hidden",
              "displayName": "Hidden"
            },
            "selectable": {
              "description": "Days outside the current viewing month will be visible + selectable",
              "displayName": "Selectable"
            },
            "visible": {
              "description": "Days outside the current viewing month will be visible",
              "displayName": "Visible"
            }
          }
        },
        "footerLayout": {
          "description": "Will dictate what content is shown within the footer of the calendar. See the date-picker attribute for usage examples.",
          "type": "string",
          "value": "today",
          "enumValues": [
            "",
            "today"
          ],
          "propertyEditorValues": {
            "": {
              "description": "Do not show anything",
              "displayName": ""
            },
            "today": {
              "description": "Show the today button",
              "displayName": "Today"
            }
          }
        },
        "numberOfMonths": {
          "description": "The number of months to show at once. Note that if one is using a numberOfMonths > 4 then one should define a CSS rule for the width of each of the months. For example if numberOfMonths is set to 6 then one should define a CSS rule .oj-datepicker-multi-6 .oj-datepicker-group providing the width each month should take in percentage. See the date-picker attribute for usage examples.",
          "type": "number",
          "value": 1,
          "minimum": 1
        },
        "showOn": {
          "description": "When the datepicker should be shown. See the date-picker attribute for usage examples.",
          "type": "string",
          "value": "focus",
          "enumValues": [
            "focus",
            "image"
          ],
          "propertyEditorValues": {
            "focus": {
              "description": "when the element receives focus or when the trigger calendar image is clicked. When the picker is closed, the field regains focus and is editable.",
              "displayName": "Focus"
            },
            "image": {
              "description": "when the trigger calendar image is clicked",
              "displayName": "Image"
            }
          }
        },
        "stepBigMonths": {
          "description": "Number of months to step back/forward for the (Alt + Page up) + (Alt + Page down) key strokes. See the date-picker attribute for usage examples.",
          "type": "number",
          "value": 12
        },
        "stepMonths": {
          "description": "How the prev + next will step back/forward the months. The following are the valid values: \"numberOfMonths\" - When set to this string, will use numberOfMonths property value as value. <number&gt; - Number of months to step back/forward. See the date-picker attribute for usage examples.",
          "type": "string|number",
          "value": "numberOfMonths"
        },
        "weekDisplay": {
          "description": "Whether week of the year will be shown. See the date-picker attribute for usage examples.",
          "type": "string",
          "value": "none",
          "enumValues": [
            "none",
            "number"
          ],
          "propertyEditorValues": {
            "none": {
              "description": "Nothing will be shown",
              "displayName": "None"
            },
            "number": {
              "description": "Will show the week of the year as a number",
              "displayName": "Number"
            }
          }
        },
        "yearRange": {
          "description": "The range of years displayed in the year drop-down: either relative to today's year (\"-nn:+nn\"), relative to the currently selected year (\"c-nn:c+nn\"), absolute (\"nnnn:nnnn\"), or combinations of these formats (\"nnnn:-nn\"). See the date-picker attribute for usage examples.",
          "type": "string",
          "value": "c-10:c+10"
        }
      }
    },
    "dayFormatter": {
      "description": "Additional info to be used when rendering the day This should be a JavaScript Function reference which accepts as its argument the following JSON format {fullYear: Date.getFullYear(), month: Date.getMonth()+1, date: Date.getDate()} and returns null or all or partial JSON data of {disabled: true|false, className: \"additionalCSS\", tooltip: 'Stuff to display'}",
      "type": "function",
      "displayName": "Day Formatter",
      "value": null
    },
    "dayMetaData": {
      "description": "Additional info to be used when rendering the day This should be in the following JSON format with the year, month, day based on Date.getFullYear(), Date.getMonth()+1, and Date.getDate(): {year: {month: {day: {disabled: true|false, className: \"additionalCSS\", tooltip: 'Stuff to display'}}} There also exists a special '*' character which represents ALL within that field [i.e. * within year, represents for ALL year]. Note that this property will override the value of the dayFormatter property. Setting both dayFormatter and dayMetaData properties is not supported.",
      "type": "object",
      "displayName": "Day Meta Data",
      "value": null
    },
    "describedBy": {
      "description": "described the relationship between this component and another element.",
      "type": "string",
      "displayName": "Described By"
    },
    "disabled": {
      "description": "Whether the component is disabled. The default is false.",
      "type": "boolean",
      "displayName": "Disabled",
      "value": false
    },
    "displayOptions": {
      "description": "Customize how to display to the user the form field's messages, converter and validator hints and help instruction text.",
      "type": "Object|undefined",
      "displayName": "Display Options",
      "value": {
        "messages": [
          "inline"
        ],
        "converterHint": [
          "placeholder",
          "notewindow"
        ],
        "validatorHint": [
          "notewindow"
        ],
        "helpInstruction": [
          "notewindow"
        ]
      },
      "properties": {
        "converterHint": {
          "description": "supported values are 'placeholder', \n'notewindow', 'none'. The \ndefault value is ['placeholder', 'notewindow']. When there \nis already a placeholder set on the component, the converter hint falls back to display \ntype of 'notewindow'.\nTo change the default value you can do this - \nE.g. {'displayOptions: {'converterHint': ['none']}}",
          "type": "Array<('placeholder'|'notewindow'|'none')>|'placeholder'|'notewindow'|'none'"
        },
        "validatorHint": {
          "description": "supported values are 'notewindow', \n'none'.\nTo change the default value you can do this - \n{'displayOptions: {'validatorHint': ['none']}}",
          "type": "Array<('notewindow'|'none')>|'notewindow'|'none'"
        },
        "messages": {
          "description": "supported values are 'notewindow', \n'inline',\n'none'. The default is 'inline'. \nTo change the default value you can do this - \nE.g. {'displayOptions: {'messages': 'none'}}",
          "type": "Array<('inline'|'notewindow'|'none')>|'inline'|'notewindow'|'none'"
        },
        "helpInstruction": {
          "description": "supported values are 'notewindow', \n'none'.\nTo change the default value you can do this - \nE.g. displayOptions='{\"helpInstruction\": \"none\"}'",
          "type": "Array<('notewindow'|'none')>|'notewindow'|'none'"
        }
      }
    },
    "help": {
      "description": "Form component help information.\n\nThe properties supported on the help option are:",
      "type": "Object.<string, string>",
      "displayName": "Help",
      "value": {
        "help": {
          "instruction": null
        }
      },
      "properties": {
        "instruction": {
          "description": "this represents advisory information for the component\nThe default value is null.",
          "type": "string"
        }
      }
    },
    "helpHints": {
      "description": "Represents hints for oj-form-layout element to \nrender help information on the label of the editable component.",
      "type": "Object.<string, string>",
      "displayName": "Help Hints",
      "value": {
        "definition": "",
        "source": ""
      },
      "translatable": true,
      "properties": {
        "definition": {
          "description": "Hint for help definition text associated with the label. \nIt is what shows up when the user hovers over the help icon, or tabs into the help icon, or press and holds the help icon on a mobile device. No formatted text is available for help definition attribute.\n\nSee the help-hints attribute for usage examples.",
          "type": "string",
          "value": ""
        },
        "source": {
          "description": "Hint for help source URL associated with the label. \nIf present, a help icon will render next to the label. For security reasons we only support urls with protocol http: or https:. If the url doesn't comply we ignore it and throw an error. \nPass in an encoded URL since we do not encode the URL.\n\nSee the help-hints attribute for usage examples.",
          "type": "string",
          "value": ""
        }
      }
    },
    "keyboardEdit": {
      "description": "Determines if keyboard entry of the text is allowed.\nWhen the datepicker is inline, the only supported value is \"disabled\".",
      "type": "string",
      "displayName": "Keyboard Edit",
      "value": "disabled",
      "enumValues": [
        "disabled"
      ],
      "propertyEditorValues": {
        "disabled": {
          "description": "Changing the date can only be done with the picker.",
          "displayName": "Disabled"
        }
      }
    },
    "labelHint": {
      "description": "Represents a hint for oj-form-layout element to render a label on the editable component.",
      "type": "string",
      "displayName": "Label Hint",
      "value": "",
      "translatable": true
    },
    "max": {
      "description": "The maximum selectable datetime. When set to null, there is no maximum. type string - ISOString null - no limit\n",
      "type": "string|null",
      "displayName": "Max",
      "value": null
    },
    "messagesCustom": {
      "description": "List of messages an app would add to the component",
      "type": "Array<Object>",
      "displayName": "Messages Custom",
      "value": [],
      "writeback": true
    },
    "min": {
      "description": "The minimum selectable date. When set to null, there is no minimum. type string - ISOString null - no limit\n",
      "type": "string|null",
      "displayName": "Min",
      "value": null
    },
    "name": {
      "description": "It indicates the name of the component.",
      "type": "string",
      "displayName": "Name",
      "value": "",
      "extension": {
        "_COPY_TO_INNER_ELEM": true
      }
    },
    "pickerAttributes": {
      "description": "Attributes specified here will be set on the picker DOM element when it's launched. The supported attributes are class and style, which are appended to the picker's class and style, if any. Note: 1) pickerAttributes is not applied in the native theme. 2) setting this property after element creation has no effect.",
      "type": "Object",
      "displayName": "Picker Attributes",
      "value": null,
      "properties": {
        "style": {
          "description": "",
          "type": "string"
        },
        "class": {
          "description": "",
          "type": "string"
        }
      }
    },
    "placeholder": {
      "description": "The placeholder text to set on the element.",
      "type": "string",
      "displayName": "Placeholder"
    },
    "rawValue": {
      "description": "The rawValue is the read-only property for retrieving \nthe current value from the input field in string form. The main consumer of\nrawValue is a converter.\n\nThe rawValue updates on the 'input' javascript event, \nso the rawValue changes as the value of the input is changed. \nIf the user types in '1,200' into the field, the rawValue will be '1', then '1,', then '1,2', \n..., and finally '1,200'. Then when the user blurs or presses \nEnter the value property gets converted and validated\n(if there is a converter or validators) and then gets updated if valid.\n\nThis is a read-only attribute so page authors cannot set or change it directly.",
      "type": "string",
      "displayName": "Raw Value",
      "writeback": true,
      "readOnly": true
    },
    "readonly": {
      "description": "Dictates component's readonly state.",
      "type": "boolean",
      "displayName": "Readonly",
      "value": false
    },
    "renderMode": {
      "description": "Allows applications to specify whether to render date picker in JET or\nas a native picker control. In inline mode, the only value supported is \"jet\"",
      "type": "string",
      "displayName": "Render Mode",
      "value": "jet",
      "enumValues": [
        "jet"
      ],
      "propertyEditorValues": {
        "jet": {
          "description": "Applications get full JET functionality.",
          "displayName": "Jet"
        }
      }
    },
    "required": {
      "description": "Whether the component is required or optional. When required is set to true, an implicit \nrequired validator is created using the validator factory - \noj.Validation.validatorFactory(oj.ValidatorFactory.VALIDATOR_TYPE_REQUIRED).createValidator().\n\nTranslations specified using the translations.required attribute \nand the label associated with the component, are passed through to the options parameter of the \ncreateValidator method. \n\n\nWhen required property changes due to programmatic intervention, \nthe component may clear messages and run validation, based on the current state it's in. \nRunning Validation\n\nif component is valid when required is set to true, then it runs deferred validation on \nthe value property. This is to ensure errors are not flagged unnecessarily.\n\nif component is invalid and has deferred messages when required is set to false, then \ncomponent messages are cleared but no deferred validation is run.\n\nif component is invalid and currently showing invalid messages when required is set, then \ncomponent messages are cleared and normal validation is run using the current display value. if there are validation errors, then value property is not updated and the error is shown. if no errors result from the validation, the value property is updated; page author can listen to the valueChanged event on the component to clear custom errors.\n\n\n\n\nClearing Messages\n\nOnly messages created by the component are cleared.\nmessagesCustom property is not cleared.\n\n\n",
      "type": "boolean",
      "displayName": "Required",
      "value": false,
      "enumValues": [
        "false",
        "true"
      ],
      "propertyEditorValues": {
        "false": {
          "description": "implies a value is not required to be provided by the user. \nThis is the default.",
          "displayName": "False"
        },
        "true": {
          "description": "implies a value is required to be provided by user and the \ninput's label will render a required icon. Additionally a required validator - \nRequiredValidator - is implicitly used if no explicit required validator is set. \nAn explicit required validator can be set by page authors using the validators attribute.",
          "displayName": "True"
        }
      }
    },
    "timePicker": {
      "description": " Note that Jet framework prohibits setting subset of properties which are object types. For example myInputDate.datePicker = {footerLayout: \"today\"}; is prohibited as it will wipe out all other sub-properties for \"datePicker\" object. If one wishes to do this [by above syntax or knockout] one will have to get the \"datePicker\" object, modify the necessary sub-property and pass it to above syntax. Default values for the datePicker sub-properties can also be overridden with the theming variable $inputDateTimeDatePickerOptionDefault, which is merged with other defaults. Note that all of the datePicker sub-properties except showOn are not available when renderMode is 'native'.",
      "type": "Object",
      "displayName": "Time Picker",
      "properties": {
        "showOn": {
          "description": "When the timepicker should be shown.\n\nSee the time-picker attribute for usage examples.",
          "type": "string",
          "value": "focus",
          "enumValues": [
            "focus",
            "image"
          ],
          "propertyEditorValues": {
            "focus": {
              "description": "when the element receives focus or when the trigger clock image is clicked. When the picker is closed, the field regains focus and is editable.",
              "displayName": "Focus"
            },
            "image": {
              "description": "when the trigger clock image is clicked",
              "displayName": "Image"
            }
          }
        },
        "timeIncrement": {
          "description": "Time increment to be used for InputDateTime, the format is hh:mm:ss:SS. \nNote that when renderMode is 'native', timeIncrement property is limited to iOS and will only take a precision of minutes. \n\nSee the time-picker attribute for usage examples.",
          "type": "string",
          "value": "00:05:00:00"
        }
      }
    },
    "translations": {
      "description": "A collection of translated resources from the translation bundle, or null if this\ncomponent has no resources. Resources may be accessed and overridden individually or collectively, as seen in the examples. If the component does not contain any translatable resource, the default value of this attribute will be \nnull. If not, an object containing all resources relevant to the component.\n\nIf this component has translations, their documentation immediately follows this doc entry.",
      "type": "Object|null",
      "displayName": "Translations",
      "translatable": true,
      "properties": {
        "cancel": {
          "description": "The text to display for the Cancel link.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "value": "Cancel"
        },
        "currentText": {
          "description": "The text to display for the current day link.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "value": "Today"
        },
        "dateRestriction": {
          "description": "Provides properties to customize the hint and message text used by the\nimplicit date restriction validator associated to the InputDateTime and InputDate components.\n\nSee the translations attribute for usage examples.",
          "type": "Object",
          "properties": {
            "hint": {
              "description": "Hint text used by the implicit date restriction validator associated to the InputDateTime and InputDate components.\n\nSee the translations attribute for usage examples.",
              "type": "string",
              "value": ""
            },
            "messageDetail": {
              "description": "Message detail for the implicit date restriction validator associated to the InputDateTime and InputDate components.\n\nSee the translations attribute for usage examples.",
              "type": "string",
              "value": ""
            },
            "messageSummary": {
              "description": "Message summary for the implicit date restriction validator associated to the InputDateTime and InputDate components.\n\nSee the translations attribute for usage examples.",
              "type": "string",
              "value": ""
            }
          }
        },
        "dateTimeRange": {
          "description": "Provides properties to customize the hint and message text used by the\nimplicit datetime range validator associated to the InputDateTime, InputDate, and InputTime components.\n\nSee the translations attribute for usage examples.",
          "type": "Object",
          "properties": {
            "hint": {
              "description": "Provides properties to customize the hint text used by the\nimplicit datetime range validator associated to the InputDateTime, InputDate, and InputTime components.\n\nSee the translations attribute for usage examples.",
              "type": "Object",
              "properties": {
                "inRange": {
                  "description": "Hint text used by the implicit datetime range validator associated to the InputDateTime, InputDate, and InputTime components.\nhint.inRange is shown when both min and max are set, and is used\nto tell the user the allowed number range.\n\nSee the translations attribute for usage examples.",
                  "type": "string",
                  "value": ""
                },
                "max": {
                  "description": "Hint text used by the implicit datetime range validator associated to the InputDateTime, InputDate, and InputTime components.\nhint.max is shown when max is set and min is not set, and is used\nto tell the user the allowed maximum.\n\nSee the translations attribute for usage examples.",
                  "type": "string",
                  "value": ""
                },
                "min": {
                  "description": "Hint text used by the implicit datetime range validator associated to the InputDateTime, InputDate, and InputTime components.\nhint.min is shown when min is set and max is not set, and is used\nto tell the user the allowed minimum.\n\nSee the translations attribute for usage examples.",
                  "type": "string",
                  "value": ""
                }
              }
            },
            "messageDetail": {
              "description": "Provides properties to customize the error message text used by the\nimplicit datetime range validator associated to the InputDateTime, InputDate, and InputTime components.\n\nSee the translations attribute for usage examples.",
              "type": "Object",
              "properties": {
                "rangeOverflow": {
                  "description": "Error message text used by the implicit datetime range validator associated to the InputDateTime, InputDate, and InputTime components.\nmessageDetail.rangeOverflow is shown when max is set, and the\nvalue is greater than the maximum.\n\nSee the translations attribute for usage examples.",
                  "type": "string",
                  "value": ""
                },
                "rangeUnderflow": {
                  "description": "Error message text used by the implicit datetime range validator associated to the InputDateTime, InputDate, and InputTime components.\nmessageDetail.rangeUnderflow is shown when min is set, and the\nvalue is less than the minimum.\n\nSee the translations attribute for usage examples.",
                  "type": "string",
                  "value": ""
                }
              }
            },
            "messageSummary": {
              "description": "Provides properties to customize the error message summary text used by the\nimplicit datetime range validator associated to the InputDateTime, InputDate, and InputTime components.\n\nSee the translations attribute for usage examples.",
              "type": "Object",
              "properties": {
                "rangeOverflow": {
                  "description": "Error message summary text used by the implicit datetime range validator associated to the InputDateTime, InputDate, and InputTime components.\nmessageSummary.rangeOverflow is shown when max is set, and the\nvalue is greater than the maximum.\n\nSee the translations attribute for usage examples.",
                  "type": "string",
                  "value": ""
                },
                "rangeUnderflow": {
                  "description": "Error message summary text used by the implicit datetime range validator associated to the InputDateTime, InputDate, and InputTime components.\nmessageSummary.rangeUnderflow is shown when min is set, and\nthe value is less than the minimum.\n\nSee the translations attribute for usage examples.",
                  "type": "string",
                  "value": ""
                }
              }
            }
          }
        },
        "done": {
          "description": "The text to display for the switchers Done link.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "value": "Done"
        },
        "nextText": {
          "description": "The text to display for the next month link.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "value": "Next"
        },
        "prevText": {
          "description": "The text to display for the previous month link.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "value": "Prev"
        },
        "regexp": {
          "description": "Provides properties to customize the message text used by the\nimplicit regexp validator associated to the InputText and TextArea components.\n\nSee the translations attribute for usage examples.",
          "type": "Object",
          "properties": {
            "messageDetail": {
              "description": "Provides properties to customize the error message detail used by the\nimplicit regexp validator associated to the InputText and TextArea components.\n\nSee the translations attribute for usage examples.",
              "type": "string"
            },
            "messageSummary": {
              "description": "Provides properties to customize the error message summary used by the\nimplicit regexp validator associated to the InputText and TextArea components.\n\nSee the translations attribute for usage examples.",
              "type": "string"
            }
          }
        },
        "required": {
          "description": "Provides properties to customize the summary, detail and hint text used by the\nimplicit required validator associated to any editable component that supports the\nrequired option.\n\nSee the translations attribute and\nrequired option for usage examples.",
          "type": "Object",
          "properties": {
            "hint": {
              "description": "Hint text used by required validation error.\n\nSee the translations attribute for usage examples.",
              "type": "string",
              "value": ""
            },
            "messageDetail": {
              "description": "Message text that describes the details of the required validation error.\n\nSee the translations attribute for usage examples.",
              "type": "string",
              "value": ""
            },
            "messageSummary": {
              "description": "Message text for summarizing a required validation error.\n\nSee the translations attribute for usage examples.",
              "type": "string",
              "value": ""
            }
          }
        },
        "tooltipCalendar": {
          "description": "Tooltip text for the calendar icon.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "value": "Select Date"
        },
        "tooltipCalendarDisabled": {
          "description": "Tooltip text for the calendar icon when the component is disabled.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "value": "Select Date Disabled"
        },
        "tooltipCalendarTime": {
          "description": "Tooltip text for the calendar + time icon.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "value": "Select Date Time"
        },
        "tooltipCalendarTimeDisabled": {
          "description": "Tooltip text for the calendar + time icon when the component is disabled.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "value": "Select Date Time Disabled"
        },
        "weekHeader": {
          "description": "The text to display for the week of the year column heading.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "value": "Wk"
        }
      }
    },
    "valid": {
      "description": "The validity state of the component",
      "type": "string",
      "displayName": "Valid",
      "writeback": true,
      "readOnly": true,
      "preview": true,
      "enumValues": [
        "invalidHidden",
        "invalidShown",
        "pending",
        "valid"
      ],
      "propertyEditorValues": {
        "invalidHidden": {
          "description": "The component has invalid messages hidden and no invalid messages showing. An invalid message is one with severity \"error\" or higher.",
          "displayName": "Invalid Hidden"
        },
        "invalidShown": {
          "description": "The component has invalid messages showing. An invalid message is one with severity \"error\" or higher.",
          "displayName": "Invalid Shown"
        },
        "pending": {
          "description": "The component is waiting for the validation state to be determined.\nThe \"pending\" state is never set in this release of JET. It will be set in a future release.",
          "displayName": "Pending"
        },
        "valid": {
          "description": "The component is valid",
          "displayName": "Valid"
        }
      }
    },
    "validators": {
      "description": "List of validators used by element when performing validation. Each item is either an \ninstance that duck types Validator, or is an Object literal containing the \nproperties listed below. Implicit validators created by an element when certain properties \nare present (e.g. required property), are separate from \nvalidators specified through this property. At runtime when the element runs validation, it \ncombines the implicit validators with the list specified through this property. \n\nHints exposed by validators are shown in the notewindow by default, or as determined by the \n'validatorHint' property set on the displayOptions \nproperty. \n\n\n\nWhen validators property changes due to programmatic \nintervention, the element may decide to clear messages and run validation, based on the \ncurrent state it is in. \n\nSteps Performed Always\n\nThe cached list of validator instances are cleared and new validator hints is pushed to \nmessaging. E.g., notewindow displays the new hint(s). \nRunning Validation\n\nif element is valid when validators changes, element does nothing other than the \nsteps it always performs.\nif element is invalid and is showing messages when \nvalidators changes then all element messages are cleared \nand full validation run using the display value on the element. if there are validation errors, then value property is not updated and the error is shown. if no errors result from the validation, the value property is updated; page author can listen to the valueChanged event to clear custom errors.\n\n\nif element is invalid and has deferred messages when validators changes, it does \nnothing other than the steps it performs always.\n\n\n\nClearing Messages\n\nOnly messages created by the element are cleared.\nmessagesCustom property is not cleared.\n\n",
      "type": "Array|undefined",
      "displayName": "Validators",
      "properties": {
        "type": {
          "description": "the validator type that has a ValidatorFactory that can \nbe retrieved using the Validation module. For a list of supported validators refer \nto ValidatorFactory. ",
          "type": "string"
        },
        "options": {
          "description": "optional Object literal of options that the validator expects.",
          "type": "Object"
        }
      }
    },
    "value": {
      "description": "The value of the DateTimePicker element which should be an ISOString",
      "type": "string",
      "displayName": "Value"
    }
  },
  "methods": {
    "show": {
      "description": "",
      "return": "void"
    },
    "showTimePicker": {
      "description": "Method to show the internally created InputTime",
      "return": "void"
    },
    "hideTimePicker": {
      "description": "",
      "return": "void"
    },
    "refresh": {
      "description": "Refreshes the element. Usually called after dom changes have been made.",
      "return": "void"
    },
    "hide": {
      "description": "Hides the datepicker. Note that this function is a no-op when renderMode is 'native'.",
      "return": "void"
    },
    "validate": {
      "description": "Validates the component's display value using the converter and all validators registered on \nthe component and updates the value option by performing the \nfollowing steps. \nAll messages are cleared, including custom messages added by the app. \nIf no converter is present then processing continues to next step. If a converter is \npresent, the UI value is first converted (i.e., parsed). If there is a parse error then \nthe messages are shown.\nIf there are no validators setup for the component the value \noption is updated using the display value. Otherwise all \nvalidators are run in sequence using the parsed value from the previous step. The implicit \nrequired validator is run first if the component is marked required. When a validation error is \nencountered it is remembered and the next validator in the sequence is run. \nAt the end of validation if there are errors, the messages are shown. \nIf there were no errors, then the \nvalue option is updated.\n",
      "preview": true,
      "return": "Promise.<string>"
    },
    "reset": {
      "description": "Resets the component by clearing all messages and messages attributes - \nmessagesCustom -\nand updates the component's display value using the attribute value. User entered values will be \nerased when this method is called.",
      "return": "void"
    },
    "showMessages": {
      "description": "Takes all deferred messages and shows them. \nIt then updates the valid property; e.g.,\nif the valid state was \"invalidHidden\"\nbefore showMessages(), the valid state will become \"invalidShown\" after showMessages(). \n\nIf there were no deferred messages this method simply returns. \n",
      "return": "void"
    },
    "setProperty": {
      "description": "Sets a property or a single subproperty for complex properties and notifies the component\nof the change, triggering a [property]Changed event.",
      "params": [
        {
          "name": "property",
          "description": "The property name to set. Supports dot notation for subproperty access.",
          "type": "string"
        },
        {
          "name": "value",
          "description": "The new value to set the property to.",
          "type": "*"
        }
      ],
      "return": "void"
    },
    "getProperty": {
      "description": "Retrieves a value for a property or a single subproperty for complex properties.",
      "params": [
        {
          "name": "property",
          "description": "The property name to get. Supports dot notation for subproperty access.",
          "type": "string"
        }
      ],
      "return": "*"
    },
    "setProperties": {
      "description": "Performs a batch set of properties.",
      "params": [
        {
          "name": "properties",
          "description": "An object containing the property and value pairs to set.",
          "type": "Object"
        }
      ],
      "return": "void"
    }
  },
  "events": {
    "ojAnimateStart": {
      "description": "Triggered when a default animation is about to start, such as when the component is\nbeing opened/closed or a child item is being added/removed. The default animation can\nbe cancelled by calling event.preventDefault.",
      "bubbles": true,
      "cancelable": true,
      "detail": {
        "action": {
          "description": "The action that triggers the animation. Supported values are: \"inline-open\" - when an inline message container opens or increases in size \"inline-close\" - when an inline message container closes or decreases in size \"notewindow-open\" - when a note window opens \"notewindow-close\" - when a note window closes ",
          "type": "string"
        },
        "element": {
          "description": "The element being animated.",
          "type": "Element"
        },
        "endCallback": {
          "description": "If the event listener calls event.preventDefault to cancel the default animation, it must call the endCallback function when it finishes its own animation handling and any custom animation has ended.",
          "type": "function"
        }
      }
    },
    "ojAnimateEnd": {
      "description": "Triggered when a default animation has ended.",
      "bubbles": true,
      "cancelable": true,
      "detail": {
        "action": {
          "description": "The action that triggers the animation. Supported values are: \"inline-open\" - when an inline message container opens or increases in size \"inline-close\" - when an inline message container closes or decreases in size \"notewindow-open\" - when a note window opens \"notewindow-close\" - when a note window closes ",
          "type": "string"
        },
        "element": {
          "description": "The element being animated.",
          "type": "Element"
        }
      }
    }
  },
  "slots": {
    "contextMenu": {
      "description": "The contextMenu slot is set on the oj-menu within this element. \nThis is used to designate the JET Menu that this component should launch as a context menu on right-click, Shift-F10, Press & Hold, or component-specific gesture. \nIf specified, the browser's native context menu will be replaced by the JET Menu specified in this slot.\n\nThe application can register a listener for the Menu's ojBeforeOpen event. The listener can cancel the launch via event.preventDefault(), \nor it can customize the menu contents by editing the menu DOM directly, and then calling refresh() on the Menu.\n\nTo help determine whether it's appropriate to cancel the launch or customize the menu, the ojBeforeOpen listener can use component API's to determine which \ntable cell, chart item, etc., is the target of the context menu. See the JSDoc and demos of the individual components for details. \n\nKeep in mind that any such logic must work whether the context menu was launched via right-click, Shift-F10, Press & Hold, or component-specific touch gesture."
    }
  }
}