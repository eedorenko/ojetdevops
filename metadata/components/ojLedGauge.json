{
  "name": "oj-led-gauge",
  "version": "5.0.0",
  "jetVersion": "5.0.0",
  "displayName": "Led Gauge",
  "preview": true,
  "roles": [
    "img",
    "application"
  ],
  "description": "Displays information graphically, highlighting a specific metric value in relation to its thresholds.",
  "properties": {
    "borderColor": {
      "description": "The border color of the gauge. Only applies when thresholds are not defined. The default value varies based on theme.",
      "type": "string",
      "displayName": "Border Color"
    },
    "color": {
      "description": "The color of the gauge. Only applies when thresholds are not defined. The default value varies based on theme.",
      "type": "string",
      "displayName": "Color"
    },
    "label": {
      "description": "An object defining the label.",
      "type": "Object",
      "displayName": "Label",
      "value": {
        "style": {},
        "text": ""
      },
      "properties": {
        "style": {
          "description": "The CSS style object defining the style of the label.",
          "type": "Object",
          "value": {}
        },
        "text": {
          "description": "The text for the label.",
          "type": "string",
          "value": "",
          "translatable": true
        }
      }
    },
    "max": {
      "description": "The maximum value of the gauge.",
      "type": "number",
      "displayName": "Max",
      "value": 100
    },
    "metricLabel": {
      "description": "An object defining the value label.",
      "type": "Object",
      "displayName": "Metric Label",
      "value": {
        "converter": null,
        "rendered": "off",
        "scaling": "auto",
        "style": {},
        "text": "",
        "textType": "number"
      },
      "properties": {
        "converter": {
          "description": "The converter used to format the labels. When using a converter, scaling should be set to none, as the formatted result may not be compatible with the scaling suffixes.",
          "type": "Object",
          "value": null
        },
        "rendered": {
          "description": "Defines if the label is rendered.",
          "type": "string",
          "value": "off",
          "enumValues": [
            "off",
            "on"
          ],
          "propertyEditorValues": {
            "off": {
              "displayName": "Off"
            },
            "on": {
              "displayName": "On"
            }
          }
        },
        "scaling": {
          "description": "The scaling behavior of the labels. When using a converter, scaling should be set to none, as the formatted result may not be compatible with the scaling suffixes.",
          "type": "string",
          "value": "auto",
          "enumValues": [
            "auto",
            "billion",
            "million",
            "none",
            "quadrillion",
            "thousand",
            "trillion"
          ],
          "propertyEditorValues": {
            "auto": {
              "displayName": "Auto"
            },
            "billion": {
              "displayName": "Billion"
            },
            "million": {
              "displayName": "Million"
            },
            "none": {
              "displayName": "None"
            },
            "quadrillion": {
              "displayName": "Quadrillion"
            },
            "thousand": {
              "displayName": "Thousand"
            },
            "trillion": {
              "displayName": "Trillion"
            }
          }
        },
        "style": {
          "description": "The CSS style object defining the style of the label.",
          "type": "Object",
          "value": {}
        },
        "text": {
          "description": "The text for the label. If specified, text will overwrite the numeric value that is displayed by default. The converter, scaling, and textType attributes are ignored when text is specified.",
          "type": "string",
          "value": "",
          "translatable": true
        },
        "textType": {
          "description": "Defines whether the label is a number or a percentage of the total value.",
          "type": "string",
          "value": "number",
          "enumValues": [
            "number",
            "percent"
          ],
          "propertyEditorValues": {
            "number": {
              "displayName": "Number"
            },
            "percent": {
              "displayName": "Percent"
            }
          }
        }
      }
    },
    "min": {
      "description": "The minimum value of the gauge.",
      "type": "number",
      "displayName": "Min",
      "value": 0
    },
    "rotation": {
      "description": "The rotation angle for the gauge. Useful for changing the direction of triangle or arrow gauges.",
      "type": "number",
      "displayName": "Rotation",
      "value": 0,
      "units": "degrees",
      "enumValues": [
        "0",
        "180",
        "270",
        "90"
      ],
      "propertyEditorValues": {
        "0": {
          "displayName": "0"
        },
        "90": {
          "displayName": "90"
        },
        "180": {
          "displayName": "180"
        },
        "270": {
          "displayName": "270"
        }
      }
    },
    "size": {
      "description": "Fraction of area to use. Values range from 0 to 1.",
      "type": "number",
      "displayName": "Size",
      "value": 1,
      "maximum": 1,
      "minimum": 0
    },
    "svgClassName": {
      "description": "The CSS style class to apply to the gauge. The style class and inline style will override any other styling specified through the properties. For tooltip interactivity, it's recommended to also pass a representative color to the color attribute.",
      "type": "string",
      "displayName": "Svg Class Name",
      "value": ""
    },
    "svgStyle": {
      "description": "The inline style to apply to the gauge. The style class and inline style will override any other styling specified through the properties. For tooltip interactivity, it's recommended to also pass a representative color to the color attribute.",
      "type": "Object",
      "displayName": "Svg Style",
      "value": {}
    },
    "thresholds": {
      "description": "An array of objects with the following properties defining the thresholds for the gauge.",
      "type": "Array<Object>",
      "displayName": "Thresholds",
      "value": []
    },
    "tooltip": {
      "description": "An object containing an optional callback function for tooltip customization.",
      "type": "Object",
      "displayName": "Tooltip",
      "value": {
        "renderer": null
      },
      "properties": {
        "renderer": {
          "description": "A function that returns a custom tooltip. The function takes a tooltip context argument,\nprovided by the gauge, and should return an object that contains only one of the two properties: insert: HTMLElement | string - An HTML element, which will be appended to the tooltip, or a tooltip string. preventDefault: true - Indicates that the tooltip should not be displayed. It is not necessary to return {preventDefault:false} to display tooltip, since this is a default behavior. ",
          "type": "function",
          "value": null
        }
      }
    },
    "trackResize": {
      "description": "Defines whether the element will automatically render in response to changes in size. If set to off, then the application is responsible for calling refresh to render the element at the new size.",
      "type": "string",
      "displayName": "Track Resize",
      "value": "on",
      "enumValues": [
        "off",
        "on"
      ],
      "propertyEditorValues": {
        "off": {
          "displayName": "Off"
        },
        "on": {
          "displayName": "On"
        }
      }
    },
    "translations": {
      "description": "A collection of translated resources from the translation bundle, or null if this\ncomponent has no resources. Resources may be accessed and overridden individually or collectively, as seen in the examples. If the component does not contain any translatable resource, the default value of this attribute will be \nnull. If not, an object containing all resources relevant to the component.\n\nIf this component has translations, their documentation immediately follows this doc entry.",
      "type": "Object|null",
      "displayName": "Translations",
      "translatable": true,
      "properties": {
        "componentName": {
          "description": "Used to describe the data visualization type for accessibility.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "value": "Gauge"
        },
        "labelAndValue": {
          "description": "Used to display a label and its value.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "value": "{0}: {1}"
        },
        "labelClearSelection": {
          "description": "Text shown for clearing multiple selection on touch devices.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "value": "Clear Selection"
        },
        "labelCountWithTotal": {
          "description": "Used to display a count out of a total.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "value": "{0} of {1}"
        },
        "labelDataVisualization": {
          "description": "Label for data visualizations used for accessibility.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "value": "Data Visualization"
        },
        "labelInvalidData": {
          "description": "Text shown when the component receives invalid data.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "value": "Invalid data"
        },
        "labelNoData": {
          "description": "Text shown when the component receives no data.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "value": "No data to display"
        },
        "stateCollapsed": {
          "description": "Used to describe the collapsed state for accessibility.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "value": "Collapsed"
        },
        "stateDrillable": {
          "description": "Used to describe a drillable object for accessibility.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "value": "Drillable"
        },
        "stateExpanded": {
          "description": "Used to describe the expanded state for accessibility.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "value": "Expanded"
        },
        "stateHidden": {
          "description": "Used to describe the hidden state for accessibility.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "value": "Hidden"
        },
        "stateIsolated": {
          "description": "Used to describe the isolated state for accessibility.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "value": "Isolated"
        },
        "stateMaximized": {
          "description": "Used to describe the maximized state for accessibility.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "value": "Maximized"
        },
        "stateMinimized": {
          "description": "Used to describe the minimized state for accessibility.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "value": "Minimized"
        },
        "stateSelected": {
          "description": "Used to describe the selected state for accessibility.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "value": "Selected"
        },
        "stateUnselected": {
          "description": "Used to describe the unselected state for accessibility.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "value": "Unselected"
        },
        "stateVisible": {
          "description": "Used to describe the visible state for accessibility.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "value": "Visible"
        }
      }
    },
    "type": {
      "description": "The shape of the LED gauge. Can take the name of a built-in shape or the svg path commands for a custom shape.",
      "type": "string",
      "displayName": "Type",
      "value": "circle",
      "enumValues": [
        "arrow",
        "circle",
        "diamond",
        "human",
        "rectangle",
        "square",
        "star",
        "triangle"
      ],
      "propertyEditorValues": {
        "arrow": {
          "displayName": "Arrow"
        },
        "circle": {
          "displayName": "Circle"
        },
        "diamond": {
          "displayName": "Diamond"
        },
        "human": {
          "displayName": "Human"
        },
        "rectangle": {
          "displayName": "Rectangle"
        },
        "square": {
          "displayName": "Square"
        },
        "star": {
          "displayName": "Star"
        },
        "triangle": {
          "displayName": "Triangle"
        }
      }
    },
    "value": {
      "description": "The metric value.",
      "type": "number|null",
      "displayName": "Value",
      "writeback": true
    },
    "visualEffects": {
      "description": "Defines whether visual effects such as overlays are applied to the gauge.",
      "type": "string",
      "displayName": "Visual Effects",
      "value": "auto",
      "enumValues": [
        "auto",
        "none"
      ],
      "propertyEditorValues": {
        "auto": {
          "displayName": "Auto"
        },
        "none": {
          "displayName": "None"
        }
      }
    }
  },
  "methods": {
    "getMetricLabel": {
      "description": "Returns the gauge's formatted metric label.",
      "return": "string"
    },
    "refresh": {
      "description": "Refreshes the component.",
      "return": "void"
    },
    "setProperty": {
      "description": "Sets a property or a single subproperty for complex properties and notifies the component\nof the change, triggering a [property]Changed event.",
      "params": [
        {
          "name": "property",
          "description": "The property name to set. Supports dot notation for subproperty access.",
          "type": "string"
        },
        {
          "name": "value",
          "description": "The new value to set the property to.",
          "type": "*"
        }
      ],
      "return": "void"
    },
    "getProperty": {
      "description": "Retrieves a value for a property or a single subproperty for complex properties.",
      "params": [
        {
          "name": "property",
          "description": "The property name to get. Supports dot notation for subproperty access.",
          "type": "string"
        }
      ],
      "return": "*"
    },
    "setProperties": {
      "description": "Performs a batch set of properties.",
      "params": [
        {
          "name": "properties",
          "description": "An object containing the property and value pairs to set.",
          "type": "Object"
        }
      ],
      "return": "void"
    }
  },
  "slots": {
    "contextMenu": {
      "description": "The contextMenu slot is set on the oj-menu within this element. \nThis is used to designate the JET Menu that this component should launch as a context menu on right-click, Shift-F10, Press & Hold, or component-specific gesture. \nIf specified, the browser's native context menu will be replaced by the JET Menu specified in this slot.\n\nThe application can register a listener for the Menu's ojBeforeOpen event. The listener can cancel the launch via event.preventDefault(), \nor it can customize the menu contents by editing the menu DOM directly, and then calling refresh() on the Menu.\n\nTo help determine whether it's appropriate to cancel the launch or customize the menu, the ojBeforeOpen listener can use component API's to determine which \ntable cell, chart item, etc., is the target of the context menu. See the JSDoc and demos of the individual components for details. \n\nKeep in mind that any such logic must work whether the context menu was launched via right-click, Shift-F10, Press & Hold, or component-specific touch gesture."
    }
  }
}