{
  "name": "oj-menu",
  "version": "5.0.0",
  "jetVersion": "5.0.0",
  "displayName": "Menu",
  "preview": true,
  "roles": [
    "menu"
  ],
  "description": "Displays a popup menu with support for touch, mouse, and keyboard interactions.",
  "properties": {
    "disabled": {
      "description": "Disables the menu if set to true.",
      "type": "boolean",
      "displayName": "Disabled",
      "value": false
    },
    "openOptions": {
      "description": "A collection of settings impacting the launch of a menu. These openOptions may be accessed and overridden individually or collectively, as seen in the examples. The values set here can be overridden on a per-launch basis by passing the corresponding params into the open method. Those per-launch values can be further customized by a ojBeforeOpen listener. The built-in [menu button]ojMenuButton and [context menu]baseComponent#contextMenu functionality overrides some of the Menu's openOptions, for WAI-ARIA compliance and other reasons. Thus, if the app really wants to customize those values, it must do so in a ojBeforeOpen listener. If the built-in menu button or context menu functionality is modified in this way, it is the app's responsibility to ensure that the result is both correct and accessible.",
      "type": "Object",
      "displayName": "Open Options",
      "properties": {
        "display": {
          "description": "Determines whether the menu is displayed as a dropDown menu or a sheet menu. The default value is \"auto\", in which case the behavior is a function of the screen width and the $menuDropDownThresholdWidth SASS variable. For example, if that variable is set to 768px, then for screen widths of 768px and larger, the menu will display as a dropDown, and for screen widths less than 768px, the menu will display as a sheet. To avoid disorienting the user, if the screen width changes while the menu is already open (e.g. due to a device rotation), the display may not change until the next launch. Sheet menus are not appropriate when submenus are present. Thus, menus having submenus are always displayed as a dropDown, regardless of the values of this option and the SASS variable. If the SASS variable is set to 0 or a huge value such as 99999px, then all menus with display set to \"auto\" will always display as a dropDown or sheet, respectively.",
          "type": "string",
          "value": "auto",
          "enumValues": [
            "auto",
            "dropDown",
            "sheet"
          ],
          "propertyEditorValues": {
            "auto": {
              "description": "Displays the menu as a sheet or dropDown, depending on the screen width.",
              "displayName": "Auto"
            },
            "dropDown": {
              "description": "Displays the menu as a dropDown.",
              "displayName": "Drop Down"
            },
            "sheet": {
              "description": "Displays the menu as a sheet.",
              "displayName": "Sheet"
            }
          }
        },
        "initialFocus": {
          "description": "Determines focus behavior when the menu is initially opened.",
          "type": "string",
          "value": "menu",
          "enumValues": [
            "firstItem",
            "menu",
            "none"
          ],
          "propertyEditorValues": {
            "firstItem": {
              "description": "Focuses the first menu item (e.g. MenuButton DownArrow behavior).",
              "displayName": "First Item"
            },
            "menu": {
              "description": "Focuses the menu itself, with no menu item focused (e.g. typical Context Menu behavior).",
              "displayName": "Menu"
            },
            "none": {
              "description": "Leaves focus where it is, e.g. on the launching component. The application must verify that the result is accessible.",
              "displayName": "None"
            }
          }
        },
        "launcher": {
          "description": "The DOM node (which may or may not be a JET element) that launches this menu. This node must be focusable, as focus is returned to it upon menu dismissal. The launcher must either be specified in this component option, or on each menu launch -- see open() and ojBeforeOpen.",
          "type": "string|Element",
          "value": null
        },
        "position": {
          "description": "Determines the position of a dropDown menu when launched via the open() method or via menu button or context menu functionality. Ignored for sheet menus. The \"my\" and \"at\" properties define aligment points relative to the menu and other element. The \"my\" property represents the menu's alignment where the \"at\" property represents the other element that can be identified by \"of\" or defauts to the launcher when the menu opens. The values of these properties describe horizontal and vertical alignments. JET supports start and end values wherever left and right are supported. The start value means \"left in LTR; right in RTL\", while the end value means \"right in LTR; left in RTL.\" Menu also supports the following extended syntax for the of field: The \"event\" keyword means \"position the menu relative to the UI event that opened the menu.\" The \"launcher\" keyword means \"position the menu relative to the launcher element.\" By default, when the of field is not set, the menu is positioned relative to the launcher. The default position value varies between menus and submenus as follows: Top level menu default: { my: { horizontal: \"start\", vertical: \"top\" }, at: { horizontal: \"start\", vertical: \"bottom\" }, offset: { x: 0, y: 0 }, collision: \"flipfit\" } Submenu default: { my: { horizontal: \"start\", vertical: \"top\" }, at: { horizontal: \"end\", vertical: \"top\" }, offset: { x: 0, y: 0 }, collision: \"flipfit\" } Deprecated v5.0.0 jQuery UI position syntax; Use of a percent unit with \"my\" or \"at\" is not supported.",
          "type": "Object",
          "properties": {
            "at": {
              "description": "Defines which position on the target element (\"of\") to align the positioned element against.",
              "type": "Object",
              "properties": {
                "horizontal": {
                  "description": "Defines the horizontal alignment of what the menu is aligned to. For top-level menus, the default value is \"start\". For submenus, the default value is \"end\".",
                  "type": "string",
                  "enumValues": [
                    "center",
                    "end",
                    "left",
                    "right",
                    "start"
                  ],
                  "propertyEditorValues": {
                    "center": {
                      "displayName": "Center"
                    },
                    "end": {
                      "description": "evaluates to \"right\" in LTR mode and \"left\" in RTL mode.",
                      "displayName": "End"
                    },
                    "left": {
                      "displayName": "Left"
                    },
                    "right": {
                      "displayName": "Right"
                    },
                    "start": {
                      "description": "evaluates to \"left\" in LTR mode and \"right\" in RTL mode.",
                      "displayName": "Start"
                    }
                  }
                },
                "vertical": {
                  "description": "Defines the vertical alignment of what the menu is aligned to. For top-level menus, the default value is \"bottom\". For submenus, the default value is \"top\".",
                  "type": "string",
                  "enumValues": [
                    "bottom",
                    "center",
                    "top"
                  ],
                  "propertyEditorValues": {
                    "bottom": {
                      "displayName": "Bottom"
                    },
                    "center": {
                      "displayName": "Center"
                    },
                    "top": {
                      "displayName": "Top"
                    }
                  }
                }
              }
            },
            "collision": {
              "description": "Rule for alternate alignment.",
              "type": "string",
              "value": "flipfit",
              "enumValues": [
                "fit",
                "flip",
                "flipfit",
                "none"
              ],
              "propertyEditorValues": {
                "fit": {
                  "description": "shift the element away from the edge of the window.",
                  "displayName": "Fit"
                },
                "flip": {
                  "description": "the element to the opposite side of the target and the collision detection is run again to see if it will fit. Whichever side allows more of the element to be visible will be used.",
                  "displayName": "Flip"
                },
                "flipfit": {
                  "description": "first applies the flip logic, placing the element on whichever side allows more of the element to be visible. Then the fit logic is applied to ensure as much of the element is visible as possible.",
                  "displayName": "Flipfit"
                },
                "none": {
                  "description": "no collision detection.",
                  "displayName": "None"
                }
              }
            },
            "my": {
              "description": "Defines which edge on the menu to align with the target (\"of\") element.",
              "type": "Object",
              "properties": {
                "horizontal": {
                  "description": "Defines the horizontal alignment of the menu.",
                  "type": "string",
                  "value": "start",
                  "enumValues": [
                    "center",
                    "end",
                    "left",
                    "right",
                    "start"
                  ],
                  "propertyEditorValues": {
                    "center": {
                      "displayName": "Center"
                    },
                    "end": {
                      "description": "evaluates to \"right\" in LTR mode and \"left\" in RTL mode.",
                      "displayName": "End"
                    },
                    "left": {
                      "displayName": "Left"
                    },
                    "right": {
                      "displayName": "Right"
                    },
                    "start": {
                      "description": "evaluates to \"left\" in LTR mode and \"right\" in RTL mode.",
                      "displayName": "Start"
                    }
                  }
                },
                "vertical": {
                  "description": "Defines the vertical alignment of the menu.",
                  "type": "string",
                  "value": "top",
                  "enumValues": [
                    "bottom",
                    "center",
                    "top"
                  ],
                  "propertyEditorValues": {
                    "bottom": {
                      "displayName": "Bottom"
                    },
                    "center": {
                      "displayName": "Center"
                    },
                    "top": {
                      "displayName": "Top"
                    }
                  }
                }
              }
            },
            "of": {
              "description": "Which element to position the menu against. The default is the launcher argument passed to the open method. If the value is a string, it should be a selector or the literal string value of window. Otherwise, a point of x,y. When a point is used, the values are relative to the whole document. Page horizontal and vertical scroll offsets need to be factored into this point - see UIEvent pageX, pageY.",
              "type": "string|Object|undefined"
            },
            "offset": {
              "description": "Defines a point offset in pixels from the (\"my\") alignment.",
              "type": "Object",
              "properties": {
                "x": {
                  "description": "Horizontal aligment offset.",
                  "type": "number",
                  "value": 0
                },
                "y": {
                  "description": "Vertical alignment offset.",
                  "type": "number",
                  "value": 0
                }
              }
            }
          }
        }
      }
    },
    "translations": {
      "description": "A collection of translated resources from the translation bundle, or null if this\ncomponent has no resources. Resources may be accessed and overridden individually or collectively, as seen in the examples. If the component does not contain any translatable resource, the default value of this attribute will be \nnull. If not, an object containing all resources relevant to the component.\n\nIf this component has translations, their documentation immediately follows this doc entry.",
      "type": "Object|null",
      "displayName": "Translations",
      "translatable": true,
      "properties": {
        "labelCancel": {
          "description": "Label for the \"Cancel\" menu item.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "value": "Cancel"
        }
      }
    }
  },
  "methods": {
    "refresh": {
      "description": "Refreshes the visual state of the menu. JET elements require a refresh() after the DOM is programmatically changed underneath the component. For Menu, this includes: After menu items are added or removed. After a change to a menu item's disabled status. After the reading direction (LTR vs. RTL) changes. ",
      "return": "void"
    },
    "open": {
      "description": "Launches this menu after firing the ojBeforeOpen event. Listeners to that event can cancel the launch via event.preventDefault(). If the launch is not canceled, then the the open event is fired after the launch. This method's optional openOptionsparam can be used to specify per-launch values for the settings in the corresponding component options, without altering those options. Those per-launch values can be further customized by a ojBeforeOpen listener. Menus launched manually (as opposed to those launched by built-in functionality such as the [menu button]ojButton#menu and [context menu]baseComponent#contextMenu functionality) must be launched via this API, not by simply unhiding the Menu DOM (such as via jQuery's show() API.",
      "params": [
        {
          "name": "event",
          "description": "What triggered the menu launch. May be null. May be omitted if subsequent params are omitted.",
          "type": "Object"
        },
        {
          "name": "openOptions",
          "description": "Options to merge with the openOptions option. May be null. May be omitted if subsequent params are omitted.",
          "type": "Object"
        }
      ],
      "return": "void"
    },
    "setProperty": {
      "description": "Sets a property or a single subproperty for complex properties and notifies the component\nof the change, triggering a [property]Changed event.",
      "params": [
        {
          "name": "property",
          "description": "The property name to set. Supports dot notation for subproperty access.",
          "type": "string"
        },
        {
          "name": "value",
          "description": "The new value to set the property to.",
          "type": "*"
        }
      ],
      "return": "void"
    },
    "getProperty": {
      "description": "Retrieves a value for a property or a single subproperty for complex properties.",
      "params": [
        {
          "name": "property",
          "description": "The property name to get. Supports dot notation for subproperty access.",
          "type": "string"
        }
      ],
      "return": "*"
    },
    "setProperties": {
      "description": "Performs a batch set of properties.",
      "params": [
        {
          "name": "properties",
          "description": "An object containing the property and value pairs to set.",
          "type": "Object"
        }
      ],
      "return": "void"
    }
  },
  "events": {
    "ojAnimateStart": {
      "description": "Triggered when a default animation is about to start, such as when the component is being opened/closed or a child item is being added/removed. The default animation can be cancelled by calling event.preventDefault.",
      "bubbles": true,
      "cancelable": true,
      "detail": {
        "action": {
          "description": "The action that is starting the animation. The number of actions can vary from element to element. Suggested values are: \"open\" - when a menu element is opened \"close\" - when a menu element is closed ",
          "type": "\"open\"|\"close\""
        },
        "element": {
          "description": "target of animation",
          "type": "Element"
        },
        "endCallback": {
          "description": "If the event listener calls event.preventDefault to cancel the default animation, It must call the endCallback function when it finishes its own animation handling and any custom animation has ended.",
          "type": "function"
        }
      }
    },
    "ojAnimateEnd": {
      "description": "Triggered when a default animation has ended, such as when the component is being opened/closed or a child item is being added/removed. This event is not triggered if the application has called preventDefault on the animateStart event.",
      "bubbles": true,
      "cancelable": true,
      "detail": {
        "element": {
          "description": "target of animation",
          "type": "Element"
        },
        "action": {
          "description": "The action that is ending the animation. The number of actions can vary from element to element. Suggested values are: \"open\" - when a menu element is opened \"close\" - when a menu element is closed ",
          "type": "\"open\"|\"close\""
        }
      }
    },
    "ojBeforeOpen": {
      "description": "Triggered before this menu is launched via the open method or via menu button or context menu functionality. The launch can be cancelled by calling event.preventDefault(). The ui.openOptions payload field contains the settings being used for this menu launch, resulting from merging the openOptions passed to open(), if any, with the openOptions component option. This field is \"live\", meaning that the listener can alter fields such as position to affect this launch without affecting the component option. Since these changes are applied to the merged object, they supersede both the openOptions passed to open() and the openOptions component option. If any of the above techniques are used to alter the built-in [menu button]ojButton#menu or [context menu]baseComponent#contextMenu functionality, it is the app's responsibility to ensure that the result is both correct and accessible.",
      "bubbles": true,
      "cancelable": true
    },
    "ojClose": {
      "description": "Triggered after this menu is closed.",
      "detail": {
        "event": {
          "description": "a custom event",
          "type": "Event"
        }
      }
    },
    "ojOpen": {
      "description": "Triggered after this menu is launched via the open method or via menu button or context menu functionality.",
      "detail": {
        "event": {
          "description": "a custom event",
          "type": "Event"
        }
      }
    },
    "ojAction": {
      "description": "Triggered when a menu item (other than the built-in \"Cancel\" item) is selected. To ensure keyboard accessibility, the only correct, supported way to react to the selection of a menu item is to listen for this event. Click listeners and href navigation should not be used. To find the value of the menu item that triggered an action event, the event.target.value should be used.",
      "bubbles": true,
      "cancelable": true
    }
  }
}