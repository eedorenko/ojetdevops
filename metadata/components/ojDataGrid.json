{
  "name": "oj-data-grid",
  "version": "5.0.0",
  "jetVersion": "5.0.0",
  "displayName": "Data Grid",
  "preview": true,
  "roles": [
    "application",
    "grid"
  ],
  "styleClasses": [
    {
      "styleGroup": [
        "oj-helper-justify-content-[direction]"
      ],
      "description": "Use this class on cells' and headers' className property to align your content horizontally. By default the alignment is flex-end on cells and varies on headers, see other possibilities in the flex layout justify section."
    },
    {
      "styleGroup": [
        "oj-helper-align-items-[direction]"
      ],
      "description": "Use this class on cells' and headers' className property to align your content vertically. By default the alignment is center on cells and headers, see other possibilities in the flex layout align section."
    },
    {
      "styleGroup": [
        "oj-datagrid-cell-no-padding"
      ],
      "description": "Used to style a datagrid cell so that it has no padding."
    },
    {
      "styleGroup": [
        "oj-datagrid-cell-padding"
      ],
      "description": "Used to style a datagrid cell so that it has the default padding."
    },
    {
      "styleGroup": [
        "oj-datagrid-depth-[number]"
      ],
      "description": "Used to style the default header widths and heights. By default the datagrid supports up to depth 7. If you have headers width depth greater than 7 specify the defaults using the class name description or use apply custom style rules to the headers."
    }
  ],
  "description": "Displays data in a cell oriented grid.",
  "properties": {
    "bandingInterval": {
      "description": "Specifies the data body row and column banding intervals.",
      "type": "Object.<string, number>",
      "displayName": "Banding Interval",
      "value": {
        "row": 0,
        "column": 0
      },
      "properties": {
        "row": {
          "description": "row banding interval",
          "type": "number"
        },
        "column": {
          "description": "column banding interval",
          "type": "number"
        }
      }
    },
    "cell": {
      "description": "Specifies attributes on the cells.",
      "type": "Object",
      "displayName": "Cell",
      "properties": {
        "className": {
          "description": "CSS class names to apply to cells.",
          "type": "function|string|null",
          "value": null
        },
        "renderer": {
          "description": "Specifies what renders is the cell.",
          "type": "function|null",
          "value": null
        },
        "style": {
          "description": "Inline style to add to the cells.",
          "type": "function|string|null",
          "value": null
        }
      }
    },
    "currentCell": {
      "description": "Specifies the grid's currently focused cell.",
      "type": "Object",
      "displayName": "Current Cell",
      "value": null,
      "writeback": true,
      "properties": {
        "type": {
          "description": "designates whether a header or databody cell is the current cell, valid values are: 'cell', 'header'",
          "type": "string"
        },
        "axis": {
          "description": "header axis, available if type is header, valid values are: 'row', 'column', 'rowEnd', 'columnEnd'",
          "type": "string"
        },
        "index": {
          "description": "header index, available if type is header",
          "type": "number"
        },
        "level": {
          "description": "header level, available if type is header",
          "type": "number"
        },
        "key": {
          "description": "header key, available if type is header",
          "type": "number"
        },
        "indexes": {
          "description": "cell indexes, available if type is cell",
          "type": "Object",
          "properties": {
            "row": {
              "description": "cell row index",
              "type": "number"
            },
            "column": {
              "description": "cell column index",
              "type": "number"
            }
          }
        },
        "keys": {
          "description": "cell keys, available if type is cell",
          "type": "Object",
          "properties": {
            "row": {
              "description": "cell row key",
              "type": "string"
            },
            "column": {
              "description": "cell column key",
              "type": "string"
            }
          }
        }
      }
    },
    "data": {
      "description": "Specifies the grid data source.",
      "type": "oj.DataGridDataSource",
      "displayName": "Data",
      "value": null
    },
    "dnd": {
      "description": "Specifies the drag and drop row reordering.",
      "type": "Object",
      "displayName": "Dnd",
      "value": {
        "reorder": {
          "row": "disable"
        }
      },
      "properties": {
        "reorder": {
          "description": "an object with property row",
          "type": "Object",
          "properties": {
            "row": {
              "description": "row reordering within the DataGrid, valid values are: 'enable', 'disable'",
              "type": "string"
            }
          }
        }
      }
    },
    "editMode": {
      "description": "Specifies if the grid is read-only or editable.",
      "type": "string",
      "displayName": "Edit Mode",
      "value": "none",
      "writeback": true,
      "enumValues": [
        "cellEdit",
        "cellNavigation",
        "none"
      ],
      "propertyEditorValues": {
        "cellEdit": {
          "description": "the DataGrid cells are individually tabbable and editable",
          "displayName": "Cell Edit"
        },
        "cellNavigation": {
          "description": "the DataGrid is a single tab stop and editable at the cell level, but currently read only",
          "displayName": "Cell Navigation"
        },
        "none": {
          "description": "the DataGrid is read only",
          "displayName": "None"
        }
      }
    },
    "gridlines": {
      "description": "Specifies the visibility of the grid body vertical and horizontal gridlines.",
      "type": "Object.<string, string>",
      "displayName": "Gridlines",
      "value": {
        "horizontal": "visible",
        "vertical": "visible"
      },
      "properties": {
        "horizontal": {
          "description": "horizontal gridlines, valid values are: 'hidden', 'visible'",
          "type": "string"
        },
        "vertical": {
          "description": "vertical gridlines, valid values are: 'hidden', 'visible'",
          "type": "string"
        }
      }
    },
    "header": {
      "description": "Specifies attributes on the headers.",
      "type": "",
      "displayName": "Header",
      "properties": {
        "column": {
          "description": "Specifies attributes on the column headers.",
          "type": "",
          "properties": {
            "className": {
              "description": "CSS class names to apply to column headers.",
              "type": "function|string|null",
              "value": null
            },
            "renderer": {
              "description": "Specifies what renders is the column headers.",
              "type": "function|null",
              "value": null
            },
            "resizable": {
              "description": "Specifies resizing width or height on the column headers.",
              "type": "Object.<string, string>|Object.<string, function(Object)>|null",
              "value": {
                "width": "disable",
                "height": "disable"
              },
              "properties": {
                "width": {
                  "description": "column width resizable, valid values are: 'enable', 'disable'",
                  "type": "string"
                },
                "height": {
                  "description": "column header height resizable, valid values are: 'enable', 'disable'",
                  "type": "string"
                }
              }
            },
            "sortable": {
              "description": "Specifies whether sorting is enabled on the column headers.",
              "type": "function|string",
              "value": "auto",
              "enumValues": [
                "auto",
                "disable",
                "enable"
              ],
              "propertyEditorValues": {
                "auto": {
                  "description": "get the sortable property from the data source",
                  "displayName": "Auto"
                },
                "disable": {
                  "description": "disable sorting on column headers",
                  "displayName": "Disable"
                },
                "enable": {
                  "description": "enable sorting on column headers",
                  "displayName": "Enable"
                }
              }
            },
            "style": {
              "description": "Inline style to add to the column headers.",
              "type": "function|string|null",
              "value": null
            }
          }
        },
        "columnEnd": {
          "description": "Specifies attributes on the column end headers.",
          "type": "",
          "properties": {
            "className": {
              "description": "CSS class names to apply to column end headers.",
              "type": "function|string|null",
              "value": null
            },
            "renderer": {
              "description": "Specifies what renders is the column end headers.",
              "type": "function|null",
              "value": null
            },
            "resizable": {
              "description": "Specifies resizing width or height on the column end headers.",
              "type": "Object.<string, string>|Object.<string, function(Object)>|null",
              "value": {
                "width": "disable",
                "height": "disable"
              },
              "properties": {
                "width": {
                  "description": "columnEnd width resizable, valid values are: 'enable', 'disable'",
                  "type": "string"
                },
                "height": {
                  "description": "columnEnd header height resizable, valid values are: 'enable', 'disable'",
                  "type": "string"
                }
              }
            },
            "style": {
              "description": "Inline style to add to the column end headers.",
              "type": "function|string|null",
              "value": null
            }
          }
        },
        "row": {
          "description": "Specifies attributes on the row headers.",
          "type": "",
          "properties": {
            "className": {
              "description": "CSS class names to apply to row headers.",
              "type": "function|string|null",
              "value": null
            },
            "renderer": {
              "description": "Specifies what renders is the row headers.",
              "type": "function|null",
              "value": null
            },
            "resizable": {
              "description": "Specifies resizing width or height on the row headers.",
              "type": "Object.<string, string>|Object.<string, function(Object)>|null",
              "value": {
                "width": "disable",
                "height": "disable"
              },
              "properties": {
                "width": {
                  "description": "row width resizable, valid values are: 'enable', 'disable'",
                  "type": "string"
                },
                "height": {
                  "description": "row header height resizable, valid values are: 'enable', 'disable'",
                  "type": "string"
                }
              }
            },
            "sortable": {
              "description": "Specifies whether sorting is enabled on the row headers.",
              "type": "function|string",
              "value": "auto",
              "enumValues": [
                "auto",
                "disable",
                "enable"
              ],
              "propertyEditorValues": {
                "auto": {
                  "description": "get the sortable property from the data source",
                  "displayName": "Auto"
                },
                "disable": {
                  "description": "disable sorting on row headers",
                  "displayName": "Disable"
                },
                "enable": {
                  "description": "enable sorting on row headers",
                  "displayName": "Enable"
                }
              }
            },
            "style": {
              "description": "Inline style to add to the row headers.",
              "type": "function|string|null",
              "value": null
            }
          }
        },
        "rowEnd": {
          "description": "Specifies attributes on the row end headers.",
          "type": "",
          "properties": {
            "className": {
              "description": "CSS class names to apply to row end headers.",
              "type": "function|string|null",
              "value": null
            },
            "renderer": {
              "description": "Specifies what renders is the row end headers.",
              "type": "function|null",
              "value": null
            },
            "resizable": {
              "description": "Specifies resizing width or height on the row end headers.",
              "type": "Object.<string, string>|Object.<string, function(Object)>|null",
              "value": {
                "width": "disable",
                "height": "disable"
              },
              "properties": {
                "width": {
                  "description": "rowEnd width resizable, valid values are: 'enable', 'disable'",
                  "type": "string"
                },
                "height": {
                  "description": "rowEnd header height resizable, valid values are: 'enable', 'disable'",
                  "type": "string"
                }
              }
            },
            "style": {
              "description": "Inline style to add to the row end headers.",
              "type": "function|string|null",
              "value": null
            }
          }
        }
      }
    },
    "scrollPolicy": {
      "description": "Specifies the grid scroll mechanism.",
      "type": "string|null",
      "displayName": "Scroll Policy",
      "value": "auto",
      "enumValues": [
        "auto",
        "loadMoreOnScroll",
        "scroll"
      ],
      "propertyEditorValues": {
        "auto": {
          "description": "the DataGrid will decide the scroll policy",
          "displayName": "Auto"
        },
        "loadMoreOnScroll": {
          "description": "additional data are fetched when the user scrolls to the bottom of the DataGrid and all previous data are kept in the DOM",
          "displayName": "Load More On Scroll"
        },
        "scroll": {
          "description": "virtual scrolling is used meaning only rows/columns visible in the viewport are fetched and kept in the DOM",
          "displayName": "Scroll"
        }
      }
    },
    "scrollPolicyOptions": {
      "description": "Gets and sets the fetch options for scrolling behaviors that triggers data fetches.",
      "type": "Object.<number>|null",
      "displayName": "Scroll Policy Options",
      "value": {
        "maxRowCount": 500,
        "maxColumnCount": 500
      },
      "properties": {
        "maxRowCount": {
          "description": "The maximum total number of rows to fetch, -1 is unbounded",
          "type": "number"
        },
        "maxColumnCount": {
          "description": "The maximum total number of columns to fetch, -1 is unbounded",
          "type": "number"
        }
      }
    },
    "scrollPosition": {
      "description": "Gets and sets the scroll position of the data grid.",
      "type": "Object",
      "displayName": "Scroll Position",
      "value": {
        "x": 0,
        "y": 0
      },
      "properties": {
        "x": {
          "description": "the horizontal position in pixel",
          "type": "number"
        },
        "y": {
          "description": "the vertical position in pixel",
          "type": "number"
        },
        "rowIndex": {
          "description": "the zero-based row index of the cell at the origin of the grid. If scrollPolicy is set to 'loadMoreOnScroll' and the index is greater than maxCount set in scrollPolicyOptions, then it will scroll and fetch until the end of the list is reached and there's no more items to fetch.",
          "type": "number"
        },
        "columnIndex": {
          "description": "the zero-based column index of the cell at the origin of the grid. If scrollPolicy is set to 'loadMoreOnScroll' and the index is greater than maxCount set in scrollPolicyOptions, then it will scroll and fetch until the end of the list is reached and there's no more items to fetch.",
          "type": "number"
        },
        "rowKey": {
          "description": "the row key of the cell at the origin of the grid. If DataGridDataSource is used for data and the key does not exist in the DataGridDataSource, then the value is ignored. If it is unknown in the data source then the grid will fetch and scroll until the item is found or the end of the axis is reached and there's no more items to fetch.",
          "type": "*"
        },
        "columnKey": {
          "description": "the column key of the cell at the origin of the grid. If DataGridDataSource is used for data and the key does not exist in the DataGridDataSource, then the value is ignored. If it is unknown in the data source then the grid will fetch and scroll until the item is found or the end of the axis is reached and there's no more items to fetch.",
          "type": "*"
        },
        "offsetX": {
          "description": "the horizontal offset in pixel relative to the cell identified by key/index.",
          "type": "number"
        },
        "offsetY": {
          "description": "the vertical offset in pixel relative to the cell identified by key/index.",
          "type": "number"
        }
      }
    },
    "selection": {
      "description": "Specifies the grid's current selection.",
      "type": "Array<Object>",
      "displayName": "Selection",
      "value": [],
      "writeback": true
    },
    "selectionMode": {
      "description": "Specifies row or cell selection.",
      "type": "Object.<string, string>",
      "displayName": "Selection Mode",
      "value": {
        "cell": "none",
        "row": "none"
      },
      "properties": {
        "row": {
          "description": "set row selection mode, valid values are: 'none', 'single', 'multiple'",
          "type": "string"
        },
        "cell": {
          "description": "set cell selection mode, valid values are: 'none', 'single', 'multiple'",
          "type": "string"
        }
      }
    },
    "translations": {
      "description": "A collection of translated resources from the translation bundle, or null if this\ncomponent has no resources. Resources may be accessed and overridden individually or collectively, as seen in the examples. If the component does not contain any translatable resource, the default value of this attribute will be \nnull. If not, an object containing all resources relevant to the component.\n\nIf this component has translations, their documentation immediately follows this doc entry.",
      "type": "Object|null",
      "displayName": "Translations",
      "translatable": true,
      "properties": {
        "accessibleActionableMode": {
          "description": "Provides properties to customize the accesible context to enter actionable mode.\n\nSee the translations attribute for usage examples.",
          "type": "string"
        },
        "accessibleColumnContext": {
          "description": "Provides properties to customize the accesible context for the column index.\n\nSee the translations attribute for usage examples.",
          "type": "string"
        },
        "accessibleColumnEndHeaderContext": {
          "description": "Provides properties to customize the accesible context for the column end header index.\n\nSee the translations attribute for usage examples.",
          "type": "string"
        },
        "accessibleColumnHeaderContext": {
          "description": "Provides properties to customize the accesible context for the column header index.\n\nSee the translations attribute for usage examples.",
          "type": "string"
        },
        "accessibleColumnSelected": {
          "description": "Provides properties to customize the accesible context when a column is selected.\n\nSee the translations attribute for usage examples.",
          "type": "string"
        },
        "accessibleColumnSpanContext": {
          "description": "Provides properties to customize the accesible context for the cell column extent/span.\n\nSee the translations option for usage examples.",
          "type": "string"
        },
        "accessibleFirstColumn": {
          "description": "Provides properties to customize the accesible context when the first column is reached.\n\nSee the translations attribute for usage examples.",
          "type": "string"
        },
        "accessibleFirstRow": {
          "description": "Provides properties to customize the accesible context when the first row is reached.\n\nSee the translations attribute for usage examples.",
          "type": "string"
        },
        "accessibleLastColumn": {
          "description": "Provides properties to customize the accesible context when the last column is reached.\n\nSee the translations attribute for usage examples.",
          "type": "string"
        },
        "accessibleLastRow": {
          "description": "Provides properties to customize the accesible context when the last row is reached.\n\nSee the translations attribute for usage examples.",
          "type": "string"
        },
        "accessibleLevelContext": {
          "description": "Provides properties to customize the accesible context for the header level.\n\nSee the translations attribute for usage examples.",
          "type": "string"
        },
        "accessibleMultiCellSelected": {
          "description": "Provides properties to customize the accesible context when mulitple cells are selected.\n\nSee the translations attribute for usage examples.",
          "type": "string"
        },
        "accessibleNavigationMode": {
          "description": "Provides properties to customize the accesible context to enter navigation mode.\n\nSee the translations attribute for usage examples.",
          "type": "string"
        },
        "accessibleRangeSelectModeOff": {
          "description": "Provides properties to customize the accesible context for discontinuous selection off.\n\nSee the translations attribute for usage examples.",
          "type": "string"
        },
        "accessibleRangeSelectModeOn": {
          "description": "Provides properties to customize the accesible context for discontinuous selection on.\n\nSee the translations attribute for usage examples.",
          "type": "string"
        },
        "accessibleRowCollapsed": {
          "description": "Provides properties to customize the accesible context when a row is collapsed.\n\nSee the translations attribute for usage examples.",
          "type": "string"
        },
        "accessibleRowContext": {
          "description": "Provides properties to customize the accesible context for the row index.\n\nSee the translations attribute for usage examples.",
          "type": "string"
        },
        "accessibleRowEndHeaderContext": {
          "description": "Provides properties to customize the accesible context for the row end header index.\n\nSee the translations attribute for usage examples.",
          "type": "string"
        },
        "accessibleRowExpanded": {
          "description": "Provides properties to customize the accesible context when a row is expanded.\n\nSee the translations attribute for usage examples.",
          "type": "string"
        },
        "accessibleRowHeaderContext": {
          "description": "Provides properties to customize the accesible context for the row header index.\n\nSee the translations attribute for usage examples.",
          "type": "string"
        },
        "accessibleRowSelected": {
          "description": "Provides properties to customize the accesible context when a row is selected.\n\nSee the translations attribute for usage examples.",
          "type": "string"
        },
        "accessibleRowSpanContext": {
          "description": "Provides properties to customize the accesible context for the cell extent/span.\n\nSee the translations option for usage examples.",
          "type": "string"
        },
        "accessibleSelectionAffordanceBottom": {
          "description": "Provides properties to customize the accesible context for the bottom selection affordance on touch device.\n\nSee the translations attribute for usage examples.",
          "type": "string"
        },
        "accessibleSelectionAffordanceTop": {
          "description": "Provides properties to customize the accesible context for the top selection affordance on touch devices.\n\nSee the translations attribute for usage examples.",
          "type": "string"
        },
        "accessibleSortAscending": {
          "description": "Provides properties to customize the accesible text when a header is sorted ascending.\n\nSee the translations attribute for usage examples.",
          "type": "string"
        },
        "accessibleSortDescending": {
          "description": "Provides properties to customize the accesible text when a header is sorted descending.\n\nSee the translations attribute for usage examples.",
          "type": "string"
        },
        "accessibleStateSelected": {
          "description": "Provides properties to customize the accesible context when an item has been selected.\n\nSee the translations attribute for usage examples.",
          "type": "string"
        },
        "accessibleSummaryEstimate": {
          "description": "Provides properties to customize the accesible context read when the exact row and column count are unknown.\n\nSee the translations attribute for usage examples.",
          "type": "string"
        },
        "accessibleSummaryExact": {
          "description": "Provides properties to customize the accesible context read when the exact row and column count are known.\n\nSee the translations attribute for usage examples.",
          "type": "string"
        },
        "accessibleSummaryExpanded": {
          "description": "Provides properties to customize the accesible context reading out the total number\nof rows expanded inside the data grid.\n\nSee the translations attribute for usage examples.",
          "type": "string"
        },
        "labelCut": {
          "description": "Provides properties to customize the context menu cut label for row reordering.\n\nSee the translations attribute for usage examples.",
          "type": "string"
        },
        "labelDisableNonContiguous": {
          "description": "Provides properties to customize the context menu label for exiting non-contigous selection.\n\nSee the translations attribute for usage examples.",
          "type": "string"
        },
        "labelEnableNonContiguous": {
          "description": "Provides properties to customize the context menu label for entering non-contigous selection.\n\nSee the translations attribute for usage examples.",
          "type": "string"
        },
        "labelPaste": {
          "description": "Provides properties to customize the context menu paste label for row reordering.\n\nSee the translations attribute for usage examples.",
          "type": "string"
        },
        "labelResize": {
          "description": "Provides properties to customize the context menu resize label.\n\nSee the translations attribute for usage examples.",
          "type": "string"
        },
        "labelResizeDialogSubmit": {
          "description": "Provides properties to customize the resize dialog submit button.\n\nSee the translations attribute for usage examples.",
          "type": "string"
        },
        "labelResizeHeight": {
          "description": "Provides properties to customize the context menu resize height label.\n\nSee the translations attribute for usage examples.",
          "type": "string"
        },
        "labelResizeWidth": {
          "description": "Provides properties to customize the context menu resize width label.\n\nSee the translations attribute for usage examples.",
          "type": "string"
        },
        "labelSortCol": {
          "description": "Provides properties to customize the context menu sort column label.\n\nSee the translations attribute for usage examples.",
          "type": "string"
        },
        "labelSortColAsc": {
          "description": "Provides properties to customize the context menu sort column ascending label.\n\nSee the translations attribute for usage examples.",
          "type": "string"
        },
        "labelSortColDsc": {
          "description": "Provides properties to customize the context menu sort column descending label.\n\nSee the translations attribute for usage examples.",
          "type": "string"
        },
        "labelSortRow": {
          "description": "Provides properties to customize the context menu sort row label.\n\nSee the translations attribute for usage examples.",
          "type": "string"
        },
        "labelSortRowAsc": {
          "description": "Provides properties to customize the context menu sort row ascending label.\n\nSee the translations attribute for usage examples.",
          "type": "string"
        },
        "labelSortRowDsc": {
          "description": "Provides properties to customize the context menu sort row descending label.\n\nSee the translations attribute for usage examples.",
          "type": "string"
        },
        "msgFetchingData": {
          "description": "Provides properties to customize the text when fetching data.\n\nSee the translations attribute for usage examples.",
          "type": "string"
        },
        "msgNoData": {
          "description": "Provides properties to customize the empty data grid text.\n\nSee the translations attribute for usage examples.",
          "type": "string"
        }
      }
    }
  },
  "methods": {
    "refresh": {
      "description": "Redraw the entire data grid after having made some external modifications."
    },
    "getContextByNode": {
      "description": "Returns an object with context for the given child DOM node. This will always contain the subid for the node, defined as the 'subId' property on the context object. Additional element specific information may also be included. For more details on returned objects, see context objects.",
      "params": [
        {
          "name": "node",
          "description": "the child DOM node",
          "type": "Element"
        }
      ],
      "return": "Object|null"
    },
    "setProperty": {
      "description": "Sets a property or a single subproperty for complex properties and notifies the component\nof the change, triggering a [property]Changed event.",
      "params": [
        {
          "name": "property",
          "description": "The property name to set. Supports dot notation for subproperty access.",
          "type": "string"
        },
        {
          "name": "value",
          "description": "The new value to set the property to.",
          "type": "*"
        }
      ],
      "return": "void"
    },
    "getProperty": {
      "description": "Retrieves a value for a property or a single subproperty for complex properties.",
      "params": [
        {
          "name": "property",
          "description": "The property name to get. Supports dot notation for subproperty access.",
          "type": "string"
        }
      ],
      "return": "*"
    },
    "setProperties": {
      "description": "Performs a batch set of properties.",
      "params": [
        {
          "name": "properties",
          "description": "An object containing the property and value pairs to set.",
          "type": "Object"
        }
      ],
      "return": "void"
    }
  },
  "events": {
    "ojResize": {
      "description": "Triggered when a portion of the DataGrid is resized",
      "detail": {
        "header": {
          "description": "the key of the header which was resized",
          "type": "string|number"
        },
        "oldDimensions": {
          "description": "the oldDimensions",
          "type": "Object",
          "properties": {
            "width": {
              "description": "the old pixel size (ex: '75px' would be 75)",
              "type": "number"
            },
            "height": {
              "description": "the old pixel size (ex: '75px' would be 75)",
              "type": "number"
            }
          }
        },
        "newDimensions": {
          "description": "the newDimensions",
          "type": "Object",
          "properties": {
            "width": {
              "description": "the new pixel size (ex: '75px' would be 75)",
              "type": "number"
            },
            "height": {
              "description": "the new pixel size (ex: '75px' would be 75)",
              "type": "number"
            }
          }
        }
      }
    },
    "ojSort": {
      "description": "Triggered when a sort is performed on the DataGrid",
      "detail": {
        "header": {
          "description": "the key of the header which was sorted on",
          "type": "string|number"
        },
        "direction": {
          "description": "the direction of the sort ascending/descending",
          "type": "string"
        }
      }
    },
    "ojScroll": {
      "description": "Triggered after the DataGrid has been scrolled via the UI or the scrollTo method.",
      "detail": {
        "scrollX": {
          "description": "the x position in pixels of the scrollable region calculated from the origin of the DataGrid. In RTL this would be the right of the grid.",
          "type": "number"
        },
        "scrollY": {
          "description": "the y position in pixels of the scrollable region",
          "type": "number"
        }
      }
    },
    "ojBeforeCurrentCell": {
      "description": "Triggered before the current cell is changed via the currentCell attribute or via the UI.",
      "detail": {
        "currentCell": {
          "description": "the new current cell, see currentCell for the object information",
          "type": "Object"
        },
        "previousCurrentCell": {
          "description": "the previous current cell, see currentCell for the object information",
          "type": "Object"
        }
      }
    },
    "ojBeforeEdit": {
      "description": "Triggered before the DataGrid is going to enter edit mode. To prevent editing the cell prevent default on the event.",
      "detail": {
        "cellContext": {
          "description": "the cellContext of the cell that editing is going to be performed on",
          "type": "Object"
        }
      }
    },
    "ojBeforeEditEnd": {
      "description": "Triggered before the DataGrid is going to exit edit mode. To prevent exit editing the prevent default on the event. There is a provided beforeEditEnd function, oj.DataCollectionEditUtils.basicHandleEditEnd, which can be specified. This function will handle canceling edits as well as invoking validation on input elements.",
      "detail": {
        "cellContext": {
          "description": "the cellContext of the cell that editing is going to be performed on",
          "type": "Object"
        },
        "cancelEdit": {
          "description": "true if the edit should be negated based on actions (i.e. escape key)",
          "type": "boolean"
        }
      }
    }
  },
  "slots": {
    "contextMenu": {
      "description": "The contextMenu slot is set on the oj-menu within this element. \nThis is used to designate the JET Menu that this component should launch as a context menu on right-click, Shift-F10, Press & Hold, or component-specific gesture. \nIf specified, the browser's native context menu will be replaced by the JET Menu specified in this slot.\n\nThe application can register a listener for the Menu's ojBeforeOpen event. The listener can cancel the launch via event.preventDefault(), \nor it can customize the menu contents by editing the menu DOM directly, and then calling refresh() on the Menu.\n\nTo help determine whether it's appropriate to cancel the launch or customize the menu, the ojBeforeOpen listener can use component API's to determine which \ntable cell, chart item, etc., is the target of the context menu. See the JSDoc and demos of the individual components for details. \n\nKeep in mind that any such logic must work whether the context menu was launched via right-click, Shift-F10, Press & Hold, or component-specific touch gesture."
    }
  }
}