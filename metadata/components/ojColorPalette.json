{
  "name": "oj-color-palette",
  "version": "5.0.0",
  "jetVersion": "5.0.0",
  "displayName": "Color Palette",
  "preview": true,
  "description": "Displays a set of pre-defined colors from which a specific color can be selected.",
  "properties": {
    "describedBy": {
      "description": "described the relationship between this component and another element.",
      "type": "string",
      "displayName": "Described By"
    },
    "disabled": {
      "description": "Whether the component is disabled. The default is false.",
      "type": "boolean",
      "displayName": "Disabled",
      "value": false
    },
    "displayOptions": {
      "description": "Customize how to display to the user the form field's messages, converter and validator hints and help instruction text.",
      "type": "Object|undefined",
      "displayName": "Display Options",
      "value": {
        "messages": [
          "inline"
        ],
        "converterHint": [
          "placeholder",
          "notewindow"
        ],
        "validatorHint": [
          "notewindow"
        ],
        "helpInstruction": [
          "notewindow"
        ]
      },
      "properties": {
        "converterHint": {
          "description": "supported values are 'placeholder', \n'notewindow', 'none'. The \ndefault value is ['placeholder', 'notewindow']. When there \nis already a placeholder set on the component, the converter hint falls back to display \ntype of 'notewindow'.\nTo change the default value you can do this - \nE.g. {'displayOptions: {'converterHint': ['none']}}",
          "type": "Array<('placeholder'|'notewindow'|'none')>|'placeholder'|'notewindow'|'none'"
        },
        "validatorHint": {
          "description": "supported values are 'notewindow', \n'none'.\nTo change the default value you can do this - \n{'displayOptions: {'validatorHint': ['none']}}",
          "type": "Array<('notewindow'|'none')>|'notewindow'|'none'"
        },
        "messages": {
          "description": "supported values are 'notewindow', \n'inline',\n'none'. The default is 'inline'. \nTo change the default value you can do this - \nE.g. {'displayOptions: {'messages': 'none'}}",
          "type": "Array<('inline'|'notewindow'|'none')>|'inline'|'notewindow'|'none'"
        },
        "helpInstruction": {
          "description": "supported values are 'notewindow', \n'none'.\nTo change the default value you can do this - \nE.g. displayOptions='{\"helpInstruction\": \"none\"}'",
          "type": "Array<('notewindow'|'none')>|'notewindow'|'none'"
        }
      }
    },
    "help": {
      "description": "Form component help information.\n\nThe properties supported on the help option are:",
      "type": "Object.<string, string>",
      "displayName": "Help",
      "value": {
        "help": {
          "instruction": null
        }
      },
      "properties": {
        "instruction": {
          "description": "this represents advisory information for the component\nThe default value is null.",
          "type": "string"
        }
      }
    },
    "helpHints": {
      "description": "Represents hints for oj-form-layout element to \nrender help information on the label of the editable component.",
      "type": "Object.<string, string>",
      "displayName": "Help Hints",
      "value": {
        "definition": "",
        "source": ""
      },
      "translatable": true,
      "properties": {
        "definition": {
          "description": "Hint for help definition text associated with the label. \nIt is what shows up when the user hovers over the help icon, or tabs into the help icon, or press and holds the help icon on a mobile device. No formatted text is available for help definition attribute.\n\nSee the help-hints attribute for usage examples.",
          "type": "string",
          "value": ""
        },
        "source": {
          "description": "Hint for help source URL associated with the label. \nIf present, a help icon will render next to the label. For security reasons we only support urls with protocol http: or https:. If the url doesn't comply we ignore it and throw an error. \nPass in an encoded URL since we do not encode the URL.\n\nSee the help-hints attribute for usage examples.",
          "type": "string",
          "value": ""
        }
      }
    },
    "labelDisplay": {
      "description": "Specifies whether a text label accompanies the color swatch.",
      "type": "string",
      "displayName": "Label Display",
      "value": "off",
      "enumValues": [
        "auto",
        "off"
      ],
      "propertyEditorValues": {
        "auto": {
          "description": "labels are displayed if the layout property is 'list' and swatch-size is 'sm' or if the layout is 'grid' and swatch-size is 'lg'",
          "displayName": "Auto"
        },
        "off": {
          "description": "labels are not displayed",
          "displayName": "Off"
        }
      }
    },
    "labelHint": {
      "description": "Represents a hint for oj-form-layout element to render a label on the editable component.",
      "type": "string",
      "displayName": "Label Hint",
      "value": "",
      "translatable": true
    },
    "labelledBy": {
      "description": "Used to establish a relationship between this element and another element.",
      "type": "string",
      "displayName": "Labelled By",
      "value": null
    },
    "layout": {
      "description": "Specifies the layout of the color swatches.",
      "type": "string",
      "displayName": "Layout",
      "value": "grid",
      "enumValues": [
        "grid",
        "list"
      ],
      "propertyEditorValues": {
        "grid": {
          "description": "Layout the color swatches in a grid",
          "displayName": "Grid"
        },
        "list": {
          "description": "Layout the color swatches in a list",
          "displayName": "List"
        }
      }
    },
    "messagesCustom": {
      "description": "List of messages an app would add to the component",
      "type": "Array<Object>",
      "displayName": "Messages Custom",
      "value": [],
      "writeback": true
    },
    "palette": {
      "description": "Specifies an array of objects defining the palette's color set.",
      "type": "Array<Object>",
      "displayName": "Palette",
      "value": null,
      "translatable": true
    },
    "swatchSize": {
      "description": "Specifies the swatch size.",
      "type": "string",
      "displayName": "Swatch Size",
      "value": "lg",
      "enumValues": [
        "lg",
        "sm",
        "xs"
      ],
      "propertyEditorValues": {
        "lg": {
          "description": "large swatch",
          "displayName": "Lg"
        },
        "sm": {
          "description": "small swatch",
          "displayName": "Sm"
        },
        "xs": {
          "description": "extra small swatch",
          "displayName": "Xs"
        }
      }
    },
    "translations": {
      "description": "A collection of translated resources from the translation bundle, or null if this\ncomponent has no resources. Resources may be accessed and overridden individually or collectively, as seen in the examples. If the component does not contain any translatable resource, the default value of this attribute will be \nnull. If not, an object containing all resources relevant to the component.\n\nIf this component has translations, their documentation immediately follows this doc entry.",
      "type": "Object|null",
      "displayName": "Translations",
      "translatable": true,
      "properties": {
        "labelNone": {
          "description": "Label for swatch with no color.\nSee the translations attribute for usage examples.",
          "type": "string",
          "value": "None"
        }
      }
    },
    "valid": {
      "description": "The validity state of the component",
      "type": "string",
      "displayName": "Valid",
      "writeback": true,
      "readOnly": true,
      "preview": true,
      "enumValues": [
        "invalidHidden",
        "invalidShown",
        "pending",
        "valid"
      ],
      "propertyEditorValues": {
        "invalidHidden": {
          "description": "The component has invalid messages hidden and no invalid messages showing. An invalid message is one with severity \"error\" or higher.",
          "displayName": "Invalid Hidden"
        },
        "invalidShown": {
          "description": "The component has invalid messages showing. An invalid message is one with severity \"error\" or higher.",
          "displayName": "Invalid Shown"
        },
        "pending": {
          "description": "The component is waiting for the validation state to be determined.\nThe \"pending\" state is never set in this release of JET. It will be set in a future release.",
          "displayName": "Pending"
        },
        "valid": {
          "description": "The component is valid",
          "displayName": "Valid"
        }
      }
    },
    "value": {
      "description": "The current value of the palette element.",
      "type": "oj.Color",
      "displayName": "Value",
      "value": null,
      "writeback": true
    }
  },
  "methods": {
    "setProperty": {
      "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a [property]Changed event.",
      "params": [
        {
          "name": "property",
          "description": "The property name to set. Supports dot notation for subproperty access.",
          "type": "string"
        },
        {
          "name": "value",
          "description": "The new value to set the property to.",
          "type": "*"
        }
      ]
    },
    "getProperty": {
      "description": "Retrieves a value for a property or a single subproperty for complex properties.",
      "params": [
        {
          "name": "property",
          "description": "The property name to set. Supports dot notation for subproperty access.",
          "type": "string"
        }
      ],
      "return": "*"
    },
    "setProperties": {
      "description": "Performs a batch set of properties.",
      "params": [
        {
          "name": "properties",
          "description": "An object containing the property and value pairs to set.",
          "type": "Object"
        }
      ]
    },
    "refresh": {
      "description": "Called when the DOM underneath the component changes requiring a re-render of the component. An \nexample is when the id for the input changes. \n\nAnother time when refresh might be called is when the locale for the page changes. When it \nchanges, attributes used by its converter and validator that are locale specific, its hints, \nmessages and translations will be updated. \n\n\n\nWhen refresh method is called, the component may take various \nsteps such as clearing messages, running validation etc., based on the state it is in. \n\nSteps Performed Always\n\nThe converter and validators used by the component are reset, and new converter and \nvalidator hints is pushed to messaging. E.g., notewindow displays the new hint(s). \nRunning Validation\n\nif component is valid when refresh() is called, the display value is refreshed if component \nhas a converter set.\nif component is invalid and is showing messages when \nrefresh() is called, then all component messages are cleared \nand full validation run using the display value on the component. if there are validation errors, then value attribute is not updated and the error is shown. if no errors result from the validation, the value attribute is updated; page author can listen to the onValueChanged event to clear custom errors.\n\n\nif component is invalid and has deferred messages when refresh() \nis called, then all component messages are cleared and deferred validation is run.\n\n\n\nClearing Messages\n\nIf clearing messages only those created by the component are cleared.\nmessagesCustom attribute is not cleared.\n\n",
      "return": "void"
    },
    "reset": {
      "description": "Resets the component by clearing all messages and messages attributes - \nmessagesCustom -\nand updates the component's display value using the attribute value. User entered values will be \nerased when this method is called.",
      "return": "void"
    },
    "showMessages": {
      "description": "Takes all deferred messages and shows them. \nIt then updates the valid property; e.g.,\nif the valid state was \"invalidHidden\"\nbefore showMessages(), the valid state will become \"invalidShown\" after showMessages(). \n\nIf there were no deferred messages this method simply returns. \n",
      "return": "void"
    }
  },
  "events": {
    "ojAnimateStart": {
      "description": "Triggered when a default animation is about to start, such as when the component is\nbeing opened/closed or a child item is being added/removed. The default animation can\nbe cancelled by calling event.preventDefault.",
      "bubbles": true,
      "cancelable": true,
      "detail": {
        "action": {
          "description": "The action that triggers the animation. Supported values are: \"inline-open\" - when an inline message container opens or increases in size \"inline-close\" - when an inline message container closes or decreases in size \"notewindow-open\" - when a note window opens \"notewindow-close\" - when a note window closes ",
          "type": "string"
        },
        "element": {
          "description": "The element being animated.",
          "type": "Element"
        },
        "endCallback": {
          "description": "If the event listener calls event.preventDefault to cancel the default animation, it must call the endCallback function when it finishes its own animation handling and any custom animation has ended.",
          "type": "function"
        }
      }
    },
    "ojAnimateEnd": {
      "description": "Triggered when a default animation has ended.",
      "bubbles": true,
      "cancelable": true,
      "detail": {
        "action": {
          "description": "The action that triggers the animation. Supported values are: \"inline-open\" - when an inline message container opens or increases in size \"inline-close\" - when an inline message container closes or decreases in size \"notewindow-open\" - when a note window opens \"notewindow-close\" - when a note window closes ",
          "type": "string"
        },
        "element": {
          "description": "The element being animated.",
          "type": "Element"
        }
      }
    }
  },
  "slots": {
    "contextMenu": {
      "description": "The contextMenu slot is set on the oj-menu within this element. \nThis is used to designate the JET Menu that this component should launch as a context menu on right-click, Shift-F10, Press & Hold, or component-specific gesture. \nIf specified, the browser's native context menu will be replaced by the JET Menu specified in this slot.\n\nThe application can register a listener for the Menu's ojBeforeOpen event. The listener can cancel the launch via event.preventDefault(), \nor it can customize the menu contents by editing the menu DOM directly, and then calling refresh() on the Menu.\n\nTo help determine whether it's appropriate to cancel the launch or customize the menu, the ojBeforeOpen listener can use component API's to determine which \ntable cell, chart item, etc., is the target of the context menu. See the JSDoc and demos of the individual components for details. \n\nKeep in mind that any such logic must work whether the context menu was launched via right-click, Shift-F10, Press & Hold, or component-specific touch gesture."
    }
  }
}