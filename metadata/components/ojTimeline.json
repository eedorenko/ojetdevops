{
  "name": "oj-timeline",
  "version": "5.0.0",
  "jetVersion": "5.0.0",
  "displayName": "Timeline",
  "preview": true,
  "roles": [
    "application"
  ],
  "description": "An interactive data visualization that displays a series of events in chronological order.",
  "properties": {
    "animationOnDataChange": {
      "description": "Defines the animation that is applied on data changes.",
      "type": "string",
      "displayName": "Animation On Data Change",
      "value": "none",
      "enumValues": [
        "auto",
        "none"
      ],
      "propertyEditorValues": {
        "auto": {
          "displayName": "Auto"
        },
        "none": {
          "displayName": "None"
        }
      }
    },
    "animationOnDisplay": {
      "description": "Defines the animation that is shown on initial display.",
      "type": "string",
      "displayName": "Animation On Display",
      "value": "none",
      "enumValues": [
        "auto",
        "none"
      ],
      "propertyEditorValues": {
        "auto": {
          "displayName": "Auto"
        },
        "none": {
          "displayName": "None"
        }
      }
    },
    "end": {
      "description": "The end time of the timeline. A valid value is required in order for the timeline to properly render. See Date and Time Formats for more details on the required string formats.",
      "type": "string",
      "displayName": "End",
      "value": ""
    },
    "majorAxis": {
      "description": "An object with the following properties, used to define a timeline axis. If not specified, no axis labels will be shown above the minor axis or in the overview.",
      "type": "Object",
      "displayName": "Major Axis",
      "value": "{\"converter\": {\"default\": null, \"seconds\": oj.Validation.converterFactory(oj.ConverterFactory.CONVERTER_TYPE_DATETIME).createConverter({'hour': 'numeric', 'minute': '2-digit', 'second': '2-digit'}), \"minutes\": oj.Validation.converterFactory(oj.ConverterFactory.CONVERTER_TYPE_DATETIME).createConverter({'hour': 'numeric', 'minute': '2-digit'}), \"hours\": oj.Validation.converterFactory(oj.ConverterFactory.CONVERTER_TYPE_DATETIME).createConverter({'hour': 'numeric'}), \"days\": oj.Validation.converterFactory(oj.ConverterFactory.CONVERTER_TYPE_DATETIME).createConverter({'month': 'numeric', 'day': '2-digit'}), \"weeks\": oj.Validation.converterFactory(oj.ConverterFactory.CONVERTER_TYPE_DATETIME).createConverter({'month': 'numeric', 'day': '2-digit'}), \"months\": oj.Validation.converterFactory(oj.ConverterFactory.CONVERTER_TYPE_DATETIME).createConverter({'month': 'long'}), \"quarters\": oj.Validation.converterFactory(oj.ConverterFactory.CONVERTER_TYPE_DATETIME).createConverter({'month': 'long'}), \"years\": oj.Validation.converterFactory(oj.ConverterFactory.CONVERTER_TYPE_DATETIME).createConverter({'year': 'numeric'})}, \"svgStyle\": {}}",
      "properties": {
        "converter": {
          "description": "A converter (an object literal or instance that duck types Converter) used to format the labels of the major axis for all 'scale' values, or an object literal whose keys are 'scale' values that map specific converters for scale specific formatting (see ojTimeAxis.Converter). See DateTimeConverterFactory for details on creating built-in datetime converters. See the major-axis attribute for usage examples.",
          "type": "Object",
          "value": "{\"default\": null, \"seconds\": oj.Validation.converterFactory(oj.ConverterFactory.CONVERTER_TYPE_DATETIME).createConverter({'hour': 'numeric', 'minute': '2-digit', 'second': '2-digit'}), \"minutes\": oj.Validation.converterFactory(oj.ConverterFactory.CONVERTER_TYPE_DATETIME).createConverter({'hour': 'numeric', 'minute': '2-digit'}), \"hours\": oj.Validation.converterFactory(oj.ConverterFactory.CONVERTER_TYPE_DATETIME).createConverter({'hour': 'numeric'}), \"days\": oj.Validation.converterFactory(oj.ConverterFactory.CONVERTER_TYPE_DATETIME).createConverter({'month': 'numeric', 'day': '2-digit'}), \"weeks\": oj.Validation.converterFactory(oj.ConverterFactory.CONVERTER_TYPE_DATETIME).createConverter({'month': 'numeric', 'day': '2-digit'}), \"months\": oj.Validation.converterFactory(oj.ConverterFactory.CONVERTER_TYPE_DATETIME).createConverter({'month': 'long'}), \"quarters\": oj.Validation.converterFactory(oj.ConverterFactory.CONVERTER_TYPE_DATETIME).createConverter({'month': 'long'}), \"years\": oj.Validation.converterFactory(oj.ConverterFactory.CONVERTER_TYPE_DATETIME).createConverter({'year': 'numeric'})}"
        },
        "scale": {
          "description": "The time scale used for the major axis. If not specified, no axis labels will be shown above the minor axis or in the overview. See the major-axis attribute for usage examples.",
          "type": "string",
          "value": null,
          "enumValues": [
            "days",
            "hours",
            "minutes",
            "months",
            "quarters",
            "seconds",
            "weeks",
            "years"
          ],
          "propertyEditorValues": {
            "days": {
              "displayName": "Days"
            },
            "hours": {
              "displayName": "Hours"
            },
            "minutes": {
              "displayName": "Minutes"
            },
            "months": {
              "displayName": "Months"
            },
            "quarters": {
              "displayName": "Quarters"
            },
            "seconds": {
              "displayName": "Seconds"
            },
            "weeks": {
              "displayName": "Weeks"
            },
            "years": {
              "displayName": "Years"
            }
          }
        },
        "svgStyle": {
          "description": "The CSS style defining any additional styling of the axis. If not specified, no additional styling will be applied. See the major-axis attribute for usage examples.",
          "type": "Object",
          "value": {}
        }
      }
    },
    "minorAxis": {
      "description": "An object with the following properties, used to define a timeline axis. This is required in order for the timeline to properly render.",
      "type": "Object",
      "displayName": "Minor Axis",
      "value": "{\"converter\": {\"default\": null, \"seconds\": oj.Validation.converterFactory(oj.ConverterFactory.CONVERTER_TYPE_DATETIME).createConverter({'hour': 'numeric', 'minute': '2-digit', 'second': '2-digit'}), \"minutes\": oj.Validation.converterFactory(oj.ConverterFactory.CONVERTER_TYPE_DATETIME).createConverter({'hour': 'numeric', 'minute': '2-digit'}), \"hours\": oj.Validation.converterFactory(oj.ConverterFactory.CONVERTER_TYPE_DATETIME).createConverter({'hour': 'numeric'}), \"days\": oj.Validation.converterFactory(oj.ConverterFactory.CONVERTER_TYPE_DATETIME).createConverter({'month': 'numeric', 'day': '2-digit'}), \"weeks\": oj.Validation.converterFactory(oj.ConverterFactory.CONVERTER_TYPE_DATETIME).createConverter({'month': 'numeric', 'day': '2-digit'}), \"months\": oj.Validation.converterFactory(oj.ConverterFactory.CONVERTER_TYPE_DATETIME).createConverter({'month': 'long'}), \"quarters\": oj.Validation.converterFactory(oj.ConverterFactory.CONVERTER_TYPE_DATETIME).createConverter({'month': 'long'}), \"years\": oj.Validation.converterFactory(oj.ConverterFactory.CONVERTER_TYPE_DATETIME).createConverter({'year': 'numeric'})}, \"svgStyle\": {}}",
      "properties": {
        "converter": {
          "description": "A converter (an object literal or instance that duck types Converter) used to format the labels of the minor axis for all 'scale' values, or an object literal whose keys are 'scale' values that map specific converters for scale specific formatting (see ojTimeAxis.Converter). See DateTimeConverterFactory for details on creating built-in datetime converters. See the minor-axis attribute for usage examples.",
          "type": "Object",
          "value": "{\"default\": null, \"seconds\": oj.Validation.converterFactory(oj.ConverterFactory.CONVERTER_TYPE_DATETIME).createConverter({'hour': 'numeric', 'minute': '2-digit', 'second': '2-digit'}), \"minutes\": oj.Validation.converterFactory(oj.ConverterFactory.CONVERTER_TYPE_DATETIME).createConverter({'hour': 'numeric', 'minute': '2-digit'}), \"hours\": oj.Validation.converterFactory(oj.ConverterFactory.CONVERTER_TYPE_DATETIME).createConverter({'hour': 'numeric'}), \"days\": oj.Validation.converterFactory(oj.ConverterFactory.CONVERTER_TYPE_DATETIME).createConverter({'month': 'numeric', 'day': '2-digit'}), \"weeks\": oj.Validation.converterFactory(oj.ConverterFactory.CONVERTER_TYPE_DATETIME).createConverter({'month': 'numeric', 'day': '2-digit'}), \"months\": oj.Validation.converterFactory(oj.ConverterFactory.CONVERTER_TYPE_DATETIME).createConverter({'month': 'long'}), \"quarters\": oj.Validation.converterFactory(oj.ConverterFactory.CONVERTER_TYPE_DATETIME).createConverter({'month': 'long'}), \"years\": oj.Validation.converterFactory(oj.ConverterFactory.CONVERTER_TYPE_DATETIME).createConverter({'year': 'numeric'})}"
        },
        "scale": {
          "description": "The time scale used for the minor axis. This is required in order for the timeline to properly render. See the minor-axis attribute for usage examples.",
          "type": "string",
          "value": null,
          "enumValues": [
            "days",
            "hours",
            "minutes",
            "months",
            "quarters",
            "seconds",
            "weeks",
            "years"
          ],
          "propertyEditorValues": {
            "days": {
              "displayName": "Days"
            },
            "hours": {
              "displayName": "Hours"
            },
            "minutes": {
              "displayName": "Minutes"
            },
            "months": {
              "displayName": "Months"
            },
            "quarters": {
              "displayName": "Quarters"
            },
            "seconds": {
              "displayName": "Seconds"
            },
            "weeks": {
              "displayName": "Weeks"
            },
            "years": {
              "displayName": "Years"
            }
          }
        },
        "svgStyle": {
          "description": "The CSS style defining any additional styling of the axis. If not specified, no additional styling will be applied. See the minor-axis attribute for usage examples.",
          "type": "Object",
          "value": {}
        },
        "zoomOrder": {
          "description": "An array of strings containing the names of scales used for zooming from longest to shortest. If not specified, the 'scale' specified on the axis will be used at all zoom levels. See the minor-axis attribute for usage examples.",
          "type": "Array<string>",
          "value": null
        }
      }
    },
    "orientation": {
      "description": "The orientation of the element.",
      "type": "string",
      "displayName": "Orientation",
      "value": "horizontal",
      "enumValues": [
        "horizontal",
        "vertical"
      ],
      "propertyEditorValues": {
        "horizontal": {
          "displayName": "Horizontal"
        },
        "vertical": {
          "displayName": "Vertical"
        }
      }
    },
    "overview": {
      "description": "An object with the following properties, used to define a timeline overview. If not specified, no overview will be shown.",
      "type": "Object",
      "displayName": "Overview",
      "value": {
        "rendered": "off",
        "svgStyle": {}
      },
      "properties": {
        "rendered": {
          "description": "Specifies whether the overview scrollbar is rendered. See the overview attribute for usage examples.",
          "type": "string",
          "value": "off",
          "enumValues": [
            "off",
            "on"
          ],
          "propertyEditorValues": {
            "off": {
              "displayName": "Off"
            },
            "on": {
              "displayName": "On"
            }
          }
        },
        "svgStyle": {
          "description": "The CSS style defining any additional styling of the overview. If not specified, no additional styling will be applied. See the overview attribute for usage examples.",
          "type": "Object",
          "value": {}
        }
      }
    },
    "referenceObjects": {
      "description": "The array of reference objects associated with the timeline. For each reference object, a line is rendered at the specified value. Currently only the first reference object in the array is supported. Any additional objects supplied in the array will be ignored.",
      "type": "Array<Object>",
      "displayName": "Reference Objects",
      "value": []
    },
    "selection": {
      "description": "An array of strings containing the ids of the initially selected items.",
      "type": "Array<string>",
      "displayName": "Selection",
      "value": [],
      "writeback": true
    },
    "selectionMode": {
      "description": "The type of selection behavior that is enabled on the timeline. If 'single' is specified, only a single item across all series can be selected at once. If 'multiple', any number of items across all series can be selected at once. Otherwise, selection is disabled.",
      "type": "string",
      "displayName": "Selection Mode",
      "value": "none",
      "enumValues": [
        "multiple",
        "none",
        "single"
      ],
      "propertyEditorValues": {
        "multiple": {
          "displayName": "Multiple"
        },
        "none": {
          "displayName": "None"
        },
        "single": {
          "displayName": "Single"
        }
      }
    },
    "series": {
      "description": "An array of objects with the following properties, used to define a timeline series. Also accepts a Promise that will resolve with an array for deferred data rendering. No data will be rendered if the Promise is rejected.",
      "type": "Array<Object>|Promise",
      "displayName": "Series",
      "value": null
    },
    "start": {
      "description": "The start time of the timeline. A valid value is required in order for the timeline to properly render. See Date and Time Formats for more details on the required string formats.",
      "type": "string",
      "displayName": "Start",
      "value": ""
    },
    "styleDefaults": {
      "description": "An object with the following properties, used to define default styling for the timeline. Component CSS classes should be used to set component wide styling. This API should be used only for styling a specific instance of the component. Properties specified on this object may be overridden by specifications on the data item. Some property default values come from the CSS and varies based on theme.",
      "type": "Object",
      "displayName": "Style Defaults",
      "value": {
        "item": {},
        "minorAxis": {},
        "majorAxis": {},
        "overview": {
          "window": {}
        },
        "referenceObject": {},
        "series": {
          "colors": [
            "#237bb1",
            "#68c182",
            "#fad55c",
            "#ed6647",
            "#8561c8",
            "#6ddbdb",
            "#ffb54d",
            "#e371b2",
            "#47bdef",
            "#a2bf39",
            "#a75dba",
            "#f7f37b"
          ]
        }
      },
      "properties": {
        "animationDuration": {
          "description": "The duration of the animations, in milliseconds. The default value comes from the CSS and varies based on theme. For data change animations with multiple stages, this attribute defines the duration of each stage. For example, if an animation contains two stages, the total duration will be two times this attribute's value. See the style-defaults attribute for usage examples.",
          "type": "number",
          "units": "\"milliseconds\""
        },
        "borderColor": {
          "description": "The border color of the timeline. The default value comes from the CSS and varies based on theme. See the style-defaults attribute for usage examples.",
          "type": "string"
        },
        "item": {
          "description": "An object with the following properties, used to define the default styling for the timeline item. See the style-defaults attribute for usage examples.",
          "type": "Object",
          "value": {},
          "properties": {
            "backgroundColor": {
              "description": "The background color of the timeline items. The default value comes from the CSS and varies based on theme. See the style-defaults attribute for usage examples.",
              "type": "string"
            },
            "borderColor": {
              "description": "The border color of the timeline items. The default value comes from the CSS and varies based on theme. See the style-defaults attribute for usage examples.",
              "type": "string"
            },
            "descriptionStyle": {
              "description": "The CSS style defining the style of the timeline item description text. The default value comes from the CSS and varies based on theme. See the style-defaults attribute for usage examples.",
              "type": "Object"
            },
            "hoverBackgroundColor": {
              "description": "The background color of the highlighted timeline items. The default value comes from the CSS and varies based on theme. See the style-defaults attribute for usage examples.",
              "type": "string"
            },
            "hoverBorderColor": {
              "description": "The border color of the highlighted timeline items. The default value comes from the CSS and varies based on theme. See the style-defaults attribute for usage examples.",
              "type": "string"
            },
            "selectedBackgroundColor": {
              "description": "The background color of the selected timeline items. The default value comes from the CSS and varies based on theme. See the style-defaults attribute for usage examples.",
              "type": "string"
            },
            "selectedBorderColor": {
              "description": "The border color of the selected timeline items. The default value comes from the CSS and varies based on theme. See the style-defaults attribute for usage examples.",
              "type": "string"
            },
            "titleStyle": {
              "description": "The CSS style defining the style of the timeline item title text. The default value comes from the CSS and varies based on theme. See the style-defaults attribute for usage examples.",
              "type": "Object"
            }
          }
        },
        "majorAxis": {
          "description": "An object with the following properties, used to define the default styling for the major time axis. See the style-defaults attribute for usage examples.",
          "type": "Object",
          "value": {},
          "properties": {
            "labelStyle": {
              "description": "The CSS style defining the style of the major time axis label text. The default value comes from the CSS and varies based on theme. See the style-defaults attribute for usage examples.",
              "type": "Object"
            },
            "separatorColor": {
              "description": "The color of the major time axis separators. The default value comes from the CSS and varies based on theme. See the style-defaults attribute for usage examples.",
              "type": "string"
            }
          }
        },
        "minorAxis": {
          "description": "An object with the following properties, used to define the default styling for the time axis. See the style-defaults attribute for usage examples.",
          "type": "Object",
          "value": {},
          "properties": {
            "backgroundColor": {
              "description": "The background color of the time axis. The default value comes from the CSS and varies based on theme. See the style-defaults attribute for usage examples.",
              "type": "string"
            },
            "borderColor": {
              "description": "The border color of the time axis. The default value comes from the CSS and varies based on theme. See the style-defaults attribute for usage examples.",
              "type": "string"
            },
            "labelStyle": {
              "description": "The CSS style defining the style of the time axis label text. The default value comes from the CSS and varies based on theme. See the style-defaults attribute for usage examples.",
              "type": "Object"
            },
            "separatorColor": {
              "description": "The color of the time axis separators. The default value comes from the CSS and varies based on theme. See the style-defaults attribute for usage examples.",
              "type": "string"
            }
          }
        },
        "overview": {
          "description": "An object with the following properties, used to define the default styling for the timeline overview. See the style-defaults attribute for usage examples.",
          "type": "Object",
          "value": {},
          "properties": {
            "backgroundColor": {
              "description": "The background color of the timeline overview. The default value comes from the CSS and varies based on theme. See the style-defaults attribute for usage examples.",
              "type": "string"
            },
            "labelStyle": {
              "description": "The CSS style defining the style of the timeline overview label text. The default value comes from the CSS and varies based on theme. See the style-defaults attribute for usage examples.",
              "type": "Object"
            },
            "window": {
              "description": "An object with the following properties, used to define the default styling for the timeline overview window. See the style-defaults attribute for usage examples.",
              "type": "Object",
              "value": {},
              "properties": {
                "backgroundColor": {
                  "description": "The background color of the timeline overview window. The default value comes from the CSS and varies based on theme. See the style-defaults attribute for usage examples.",
                  "type": "string"
                },
                "borderColor": {
                  "description": "The border color of the timeline overview window. The default value comes from the CSS and varies based on theme. See the style-defaults attribute for usage examples.",
                  "type": "string"
                }
              }
            }
          }
        },
        "referenceObject": {
          "description": "An object with the following properties, used to define the default styling for the reference objects. See the style-defaults attribute for usage examples.",
          "type": "Object",
          "value": {},
          "properties": {
            "color": {
              "description": "The color of the reference objects. The default value comes from the CSS and varies based on theme. See the style-defaults attribute for usage examples.",
              "type": "string"
            }
          }
        },
        "series": {
          "description": "An object with the following properties, used to define the default styling for the timeline series. See the style-defaults attribute for usage examples.",
          "type": "Object",
          "value": {
            "colors": [
              "#237bb1",
              "#68c182",
              "#fad55c",
              "#ed6647",
              "#8561c8",
              "#6ddbdb",
              "#ffb54d",
              "#e371b2",
              "#47bdef",
              "#a2bf39",
              "#a75dba",
              "#f7f37b"
            ]
          },
          "properties": {
            "backgroundColor": {
              "description": "The background color of the series. The default value comes from the CSS and varies based on theme. See the style-defaults attribute for usage examples.",
              "type": "string"
            },
            "colors": {
              "description": "The array defining the default color ramp for the series items. See the style-defaults attribute for usage examples.",
              "type": "Array<string>",
              "value": [
                "#237bb1",
                "#68c182",
                "#fad55c",
                "#ed6647",
                "#8561c8",
                "#6ddbdb",
                "#ffb54d",
                "#e371b2",
                "#47bdef",
                "#a2bf39",
                "#a75dba",
                "#f7f37b"
              ]
            },
            "emptyTextStyle": {
              "description": "The CSS style defining the style of the series empty text. The default value comes from the CSS and varies based on theme. See the style-defaults attribute for usage examples.",
              "type": "Object"
            },
            "labelStyle": {
              "description": "The CSS style defining the style of the series label text. The default value comes from the CSS and varies based on theme. See the style-defaults attribute for usage examples.",
              "type": "Object"
            }
          }
        }
      }
    },
    "trackResize": {
      "description": "Defines whether the element will automatically render in response to changes in size. If set to off, then the application is responsible for calling refresh to render the element at the new size.",
      "type": "string",
      "displayName": "Track Resize",
      "value": "on",
      "enumValues": [
        "off",
        "on"
      ],
      "propertyEditorValues": {
        "off": {
          "displayName": "Off"
        },
        "on": {
          "displayName": "On"
        }
      }
    },
    "translations": {
      "description": "A collection of translated resources from the translation bundle, or null if this\ncomponent has no resources. Resources may be accessed and overridden individually or collectively, as seen in the examples. If the component does not contain any translatable resource, the default value of this attribute will be \nnull. If not, an object containing all resources relevant to the component.\n\nIf this component has translations, their documentation immediately follows this doc entry.",
      "type": "Object|null",
      "displayName": "Translations",
      "translatable": true,
      "properties": {
        "accessibleItemDesc": {
          "description": "Provides properties to customize the screen reader text describing an item's description text.",
          "type": "string",
          "value": "Description is {0}."
        },
        "accessibleItemEnd": {
          "description": "Provides properties to customize the screen reader text describing an item's end time.",
          "type": "string",
          "value": "End time is {0}."
        },
        "accessibleItemStart": {
          "description": "Provides properties to customize the screen reader text describing an item's start time.",
          "type": "string",
          "value": "Start time is {0}."
        },
        "accessibleItemTitle": {
          "description": "Provides properties to customize the screen reader text describing an item's title text.",
          "type": "string",
          "value": "Title is {0}."
        },
        "componentName": {
          "description": "Used to describe the data visualization type for accessibility.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "value": "Timeline"
        },
        "labelAndValue": {
          "description": "Used to display a label and its value.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "value": "{0}: {1}"
        },
        "labelClearSelection": {
          "description": "Text shown for clearing multiple selection on touch devices.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "value": "Clear Selection"
        },
        "labelCountWithTotal": {
          "description": "Used to display a count out of a total.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "value": "{0} of {1}"
        },
        "labelDataVisualization": {
          "description": "Label for data visualizations used for accessibility.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "value": "Data Visualization"
        },
        "labelInvalidData": {
          "description": "Text shown when the component receives invalid data.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "value": "Invalid data"
        },
        "labelNoData": {
          "description": "Text shown when the component receives no data.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "value": "No data to display"
        },
        "labelSeries": {
          "description": "Used for accessibility.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "value": "Series"
        },
        "stateCollapsed": {
          "description": "Used to describe the collapsed state for accessibility.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "value": "Collapsed"
        },
        "stateDrillable": {
          "description": "Used to describe a drillable object for accessibility.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "value": "Drillable"
        },
        "stateExpanded": {
          "description": "Used to describe the expanded state for accessibility.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "value": "Expanded"
        },
        "stateHidden": {
          "description": "Used to describe the hidden state for accessibility.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "value": "Hidden"
        },
        "stateIsolated": {
          "description": "Used to describe the isolated state for accessibility.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "value": "Isolated"
        },
        "stateMaximized": {
          "description": "Used to describe the maximized state for accessibility.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "value": "Maximized"
        },
        "stateMinimized": {
          "description": "Used to describe the minimized state for accessibility.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "value": "Minimized"
        },
        "stateSelected": {
          "description": "Used to describe the selected state for accessibility.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "value": "Selected"
        },
        "stateUnselected": {
          "description": "Used to describe the unselected state for accessibility.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "value": "Unselected"
        },
        "stateVisible": {
          "description": "Used to describe the visible state for accessibility.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "value": "Visible"
        },
        "tooltipZoomIn": {
          "description": "Used for the zoom in tooltip.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "value": "Zoom In"
        },
        "tooltipZoomOut": {
          "description": "Used for the zoom out tooltip.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "value": "Zoom Out"
        }
      }
    },
    "viewportEnd": {
      "description": "The end time of the timeline's viewport. If not specified or invalid, this will default to a value determined by the initial 'scale' of the minor axis and the width of the timeline. See Date and Time Formats for more details on the required string formats.",
      "type": "string",
      "displayName": "Viewport End",
      "value": ""
    },
    "viewportStart": {
      "description": "The start time of the timeline's viewport. If not specified or invalid, this will default to a value determined by the initial 'scale' of the minor axis and the width of the timeline. See Date and Time Formats for more details on the required string formats.",
      "type": "string",
      "displayName": "Viewport Start",
      "value": ""
    }
  },
  "methods": {
    "getContextByNode": {
      "description": "Returns an object with context for the given child DOM node. This will always contain the subid for the node,\ndefined as the 'subId' property on the context object. Additional component specific information may also be included.\n\nFor more details on returned objects, see context objects.",
      "params": [
        {
          "name": "node",
          "description": "The child DOM node",
          "type": "Element"
        }
      ],
      "return": "Object|null"
    },
    "refresh": {
      "description": "Refreshes the component.",
      "return": "void"
    },
    "setProperty": {
      "description": "Sets a property or a single subproperty for complex properties and notifies the component\nof the change, triggering a [property]Changed event.",
      "params": [
        {
          "name": "property",
          "description": "The property name to set. Supports dot notation for subproperty access.",
          "type": "string"
        },
        {
          "name": "value",
          "description": "The new value to set the property to.",
          "type": "*"
        }
      ],
      "return": "void"
    },
    "getProperty": {
      "description": "Retrieves a value for a property or a single subproperty for complex properties.",
      "params": [
        {
          "name": "property",
          "description": "The property name to get. Supports dot notation for subproperty access.",
          "type": "string"
        }
      ],
      "return": "*"
    },
    "setProperties": {
      "description": "Performs a batch set of properties.",
      "params": [
        {
          "name": "properties",
          "description": "An object containing the property and value pairs to set.",
          "type": "Object"
        }
      ],
      "return": "void"
    }
  },
  "events": {
    "ojViewportChange": {
      "description": "Triggered after the viewport is changed due to a zoom or scroll operation.",
      "bubbles": true,
      "detail": {
        "viewportStart": {
          "description": "the start of the new viewport on a timeline",
          "type": "string"
        },
        "viewportEnd": {
          "description": "the end of the new viewport on a timeline",
          "type": "string"
        },
        "minorAxisScale": {
          "description": "the time scale of the minor axis",
          "type": "string"
        }
      }
    }
  },
  "slots": {
    "contextMenu": {
      "description": "The contextMenu slot is set on the oj-menu within this element. \nThis is used to designate the JET Menu that this component should launch as a context menu on right-click, Shift-F10, Press & Hold, or component-specific gesture. \nIf specified, the browser's native context menu will be replaced by the JET Menu specified in this slot.\n\nThe application can register a listener for the Menu's ojBeforeOpen event. The listener can cancel the launch via event.preventDefault(), \nor it can customize the menu contents by editing the menu DOM directly, and then calling refresh() on the Menu.\n\nTo help determine whether it's appropriate to cancel the launch or customize the menu, the ojBeforeOpen listener can use component API's to determine which \ntable cell, chart item, etc., is the target of the context menu. See the JSDoc and demos of the individual components for details. \n\nKeep in mind that any such logic must work whether the context menu was launched via right-click, Shift-F10, Press & Hold, or component-specific touch gesture."
    }
  }
}